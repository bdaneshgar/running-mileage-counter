

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Wed Nov 28 18:41:01 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,delta=2
    16                           	psect	text282,local,class=CODE,delta=2
    17                           	psect	text286,local,class=CODE,delta=2
    18                           	psect	text287,local,class=CODE,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text295,local,class=CODE,delta=2
    21                           	psect	pa_nodes,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  000A                     
    24                           	psect	idataBANK3
    25  0452                     __pidataBANK3:	
    26                           
    27                           ;initializer for uart_txt@F1620
    28  0452  3420               	retlw	32
    29  0453  3420               	retlw	32
    30  0454  3420               	retlw	32
    31  0455  3420               	retlw	32
    32  0456  3420               	retlw	32
    33  0457  3420               	retlw	32
    34  0458  3420               	retlw	32
    35  0459  3420               	retlw	32
    36  045A  3420               	retlw	32
    37  045B  3420               	retlw	32
    38  045C  3420               	retlw	32
    39  045D  3420               	retlw	32
    40  045E  3420               	retlw	32
    41  045F  3420               	retlw	32
    42  0460  3420               	retlw	32
    43  0461  3420               	retlw	32
    44  0462  3420               	retlw	32
    45  0463  3420               	retlw	32
    46  0464  3420               	retlw	32
    47  0465  3420               	retlw	32
    48  0466  3420               	retlw	32
    49  0467  3420               	retlw	32
    50  0468  3420               	retlw	32
    51  0469  3420               	retlw	32
    52  046A  3420               	retlw	32
    53  046B  3420               	retlw	32
    54  046C  3420               	retlw	32
    55  046D  3420               	retlw	32
    56  046E  3420               	retlw	32
    57  046F  3420               	retlw	32
    58  0470  3420               	retlw	32
    59  0471  3420               	retlw	32
    60  0472  3420               	retlw	32
    61  0473  3420               	retlw	32
    62  0474  3420               	retlw	32
    63  0475  3420               	retlw	32
    64  0476  3420               	retlw	32
    65  0477  3420               	retlw	32
    66  0478  3420               	retlw	32
    67  0479  3420               	retlw	32
    68  047A  3420               	retlw	32
    69  047B  3420               	retlw	32
    70  047C  3420               	retlw	32
    71  047D  3420               	retlw	32
    72  047E  3420               	retlw	32
    73  047F  3420               	retlw	32
    74  0480  3420               	retlw	32
    75  0481  3420               	retlw	32
    76  0482  3420               	retlw	32
    77  0483  3420               	retlw	32
    78  0484  3420               	retlw	32
    79  0485  3420               	retlw	32
    80  0486  3420               	retlw	32
    81  0487  3420               	retlw	32
    82  0488  3420               	retlw	32
    83  0489  3420               	retlw	32
    84  048A  3420               	retlw	32
    85  048B  3420               	retlw	32
    86  048C  3420               	retlw	32
    87  048D  3420               	retlw	32
    88  048E  3420               	retlw	32
    89  048F  3420               	retlw	32
    90  0490  3420               	retlw	32
    91  0491  3420               	retlw	32
    92  0492  3420               	retlw	32
    93  0493  3420               	retlw	32
    94  0494  3420               	retlw	32
    95  0495  3420               	retlw	32
    96  0496  3400               	retlw	0
    97  0005                     _PORTA	set	5
    98  0007                     _PORTC	set	7
    99  001A                     _RCREG	set	26
   100  0018                     _RCSTA	set	24
   101  0019                     _TXREG	set	25
   102  00C3                     _ADDEN	set	195
   103  00C4                     _CREN	set	196
   104  005F                     _GIE	set	95
   105  005E                     _PEIE	set	94
   106  002F                     _RA7	set	47
   107  0030                     _RB0	set	48
   108  0038                     _RC0	set	56
   109  0039                     _RC1	set	57
   110  003A                     _RC2	set	58
   111  003B                     _RC3	set	59
   112  0065                     _RCIF	set	101
   113  00C6                     _RX9	set	198
   114  00C7                     _SPEN	set	199
   115  0064                     _TXIF	set	100
   116  0081                     _OPTION_REG	set	129
   117  008F                     _OSCCON	set	143
   118  0099                     _SPBRG	set	153
   119  0085                     _TRISA	set	133
   120  0086                     _TRISB	set	134
   121  0087                     _TRISC	set	135
   122  0098                     _TXSTA	set	152
   123  04C2                     _BRGH	set	1218
   124  0465                     _RCIE	set	1125
   125  04C4                     _SYNC	set	1220
   126  043E                     _TRISC6	set	1086
   127  043F                     _TRISC7	set	1087
   128  04C1                     _TRMT	set	1217
   129  0464                     _TXIE	set	1124
   130  0188                     _ANSEL	set	392
   131  0189                     _ANSELH	set	393
   132  0C3B                     _BRG16	set	3131
   133                           
   134                           	psect	strings
   135  0497                     __pstrings:	
   136  0497                     stringtab:	
   137                           ;	global	stringdir,stringtab,__stringbase
   138                           
   139  0497                     stringcode:	
   140                           ;	String table - string pointers are 1 byte each
   141                           
   142  0497                     stringdir:	
   143  0497  3004               	movlw	high stringdir
   144  0498  008A               	movwf	10
   145  0499  0804               	movf	4,w
   146  049A  0A84               	incf	4,f
   147  049B  0782               	addwf	2,f
   148  049C                     __stringbase:	
   149  049C  3400               	retlw	0
   150  049D                     STR_4:	
   151  049D  3443               	retlw	67	;'C'
   152  049E  346C               	retlw	108	;'l'
   153  049F  3465               	retlw	101	;'e'
   154  04A0  3461               	retlw	97	;'a'
   155  04A1  3472               	retlw	114	;'r'
   156  04A2  3420               	retlw	32	;' '
   157  04A3  3441               	retlw	65	;'A'
   158  04A4  346C               	retlw	108	;'l'
   159  04A5  346C               	retlw	108	;'l'
   160  04A6  3400               	retlw	0
   161  04A7                     STR_6:	
   162  04A7  3453               	retlw	83	;'S'
   163  04A8  3465               	retlw	101	;'e'
   164  04A9  3467               	retlw	103	;'g'
   165  04AA  3420               	retlw	32	;' '
   166  04AB  344D               	retlw	77	;'M'
   167  04AC  346F               	retlw	111	;'o'
   168  04AD  3464               	retlw	100	;'d'
   169  04AE  3465               	retlw	101	;'e'
   170  04AF  3400               	retlw	0
   171  04B0                     STR_5:	
   172  04B0  344E               	retlw	78	;'N'
   173  04B1  3475               	retlw	117	;'u'
   174  04B2  346D               	retlw	109	;'m'
   175  04B3  3420               	retlw	32	;' '
   176  04B4  344D               	retlw	77	;'M'
   177  04B5  346F               	retlw	111	;'o'
   178  04B6  3464               	retlw	100	;'d'
   179  04B7  3465               	retlw	101	;'e'
   180  04B8  3400               	retlw	0
   181  04B9                     STR_1:	
   182  04B9  3441               	retlw	65	;'A'
   183  04BA  3444               	retlw	68	;'D'
   184  04BB  3452               	retlw	82	;'R'
   185  04BC  3420               	retlw	32	;' '
   186  04BD  3430               	retlw	48	;'0'
   187  04BE  3400               	retlw	0
   188  04BF                     STR_7:	
   189  04BF  3453               	retlw	83	;'S'
   190  04C0  346C               	retlw	108	;'l'
   191  04C1  3465               	retlw	101	;'e'
   192  04C2  3465               	retlw	101	;'e'
   193  04C3  3470               	retlw	112	;'p'
   194  04C4  3400               	retlw	0
   195  04C5                     STR_8:	
   196  04C5  3457               	retlw	87	;'W'
   197  04C6  3461               	retlw	97	;'a'
   198  04C7  346B               	retlw	107	;'k'
   199  04C8  3465               	retlw	101	;'e'
   200  04C9  3400               	retlw	0
   201  04CA                     STR_2:	
   202  04CA  3441               	retlw	65	;'A'
   203  04CB  344D               	retlw	77	;'M'
   204  04CC  3400               	retlw	0
   205  04CD                     STR_3:	
   206  04CD  3450               	retlw	80	;'P'
   207  04CE  344D               	retlw	77	;'M'
   208  04CF  3400               	retlw	0
   209                           
   210                           	psect	cinit
   211  04D0                     start_initialization:	
   212                           
   213                           ; Clear objects allocated to COMMON
   214  04D0  01FA               	clrf	__pbssCOMMON& (0+127)
   215  04D1  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   216  04D2  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   217  04D3  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
   218                           
   219                           ; Clear objects allocated to BANK0
   220  04D4  01EE               	clrf	__pbssBANK0& (0+127)
   221  04D5  01EF               	clrf	(__pbssBANK0+1)& (0+127)
   222                           
   223                           ; Clear objects allocated to BANK1
   224  04D6  1683               	bsf	3,5	;RP0=1, select bank1
   225  04D7  30D5               	movlw	low (__pdataBANK3+69)
   226  04D8  01B4               	clrf	__pbssBANK1& (0+127)
   227  04D9  01B5               	clrf	(__pbssBANK1+1)& (0+127)
   228  04DA  01B6               	clrf	(__pbssBANK1+2)& (0+127)
   229  04DB  01B7               	clrf	(__pbssBANK1+3)& (0+127)
   230                           
   231                           ; Initialize objects allocated to BANK3
   232  04DC  1783               	bsf	3,7	;select IRP bank2
   233  04DD  00FD               	movwf	125
   234  04DE  3004               	movlw	high __pidataBANK3
   235  04DF  00FE               	movwf	126
   236  04E0  3052               	movlw	low __pidataBANK3
   237  04E1  00FF               	movwf	127
   238  04E2  3090               	movlw	low __pdataBANK3
   239  04E3  0084               	movwf	4
   240  04E4  120A  118A  24EF   	fcall	init_ram
   241  04E7                     end_of_initialization:	
   242                           ;End of C runtime variable initialization code
   243                           
   244  04E7  0183               	clrf	3
   245  04E8  120A  118A  2B52   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	bssCOMMON
   248  007A                     __pbssCOMMON:	
   249  007A                     _address:	
   250  007A                     	ds	1
   251  007B                     _data:	
   252  007B                     	ds	1
   253  007C                     _m_address:	
   254  007C                     	ds	1
   255  007D                     _received:	
   256  007D                     	ds	1
   257                           
   258                           	psect	bssBANK0
   259  006E                     __pbssBANK0:	
   260  006E                     _digit:	
   261  006E                     	ds	1
   262  006F                     _num_seg_wrt_flg:	
   263  006F                     	ds	1
   264                           
   265                           	psect	bssBANK1
   266  00B4                     __pbssBANK1:	
   267  00B4                     _clr_flgs:	
   268  00B4                     	ds	2
   269  00B6                     _set_flgs:	
   270  00B6                     	ds	2
   271                           
   272                           	psect	dataBANK3
   273  0190                     __pdataBANK3:	
   274  0190                     uart_txt@F1620:	
   275  0190                     	ds	69
   276                           
   277                           	psect	inittext
   278  04EB                     init_fetch:	
   279                           ;	Called with low address in FSR and high address in W
   280                           
   281  04EB  087E               	movf	126,w
   282  04EC  008A               	movwf	10
   283  04ED  087F               	movf	127,w
   284  04EE  0082               	movwf	2
   285  04EF                     init_ram:	
   286                           ;Called with:
   287                           ;	high address of idata address in btemp 
   288                           ;	low address of idata address in btemp+1 
   289                           ;	low address of data in FSR
   290                           ;	high address + 1 of data in btemp-1
   291                           
   292  04EF  24EB  120A  118A   	fcall	init_fetch
   293  04F2  0080               	movwf	0
   294  04F3  0A84               	incf	4,f
   295  04F4  0804               	movf	4,w
   296  04F5  067D               	xorwf	125,w
   297  04F6  1903               	btfsc	3,2
   298  04F7  3400               	retlw	0
   299  04F8  0AFF               	incf	127,f
   300  04F9  1903               	btfsc	3,2
   301  04FA  0AFE               	incf	126,f
   302  04FB  2CEF               	goto	init_ram
   303                           
   304                           	psect	cstackBANK1
   305  00A0                     __pcstackBANK1:	
   306  00A0                     ?_delays:	
   307  00A0                     ?_delay:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  00A0                     ?_uart_init:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  00A0                     uart_init@rx_interrupt_enable:	
   314                           ; 2 bytes @ 0x0
   315                           
   316  00A0                     delays@x:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  00A0                     delay@x:	
   320                           ; 4 bytes @ 0x0
   321                           
   322                           
   323                           ; 4 bytes @ 0x0
   324  00A0                     	ds	1
   325  00A1                     uart_init@tx_interrupt_enable:	
   326                           
   327                           ; 1 bytes @ 0x1
   328  00A1                     	ds	1
   329  00A2                     ??_uart_init:	
   330  00A2                     uart_init@baud:	
   331                           ; 0 bytes @ 0x2
   332                           
   333                           
   334                           ; 1 bytes @ 0x2
   335  00A2                     	ds	2
   336  00A4                     ?_write_disp:	
   337  00A4                     ??_delays:	
   338                           ; 0 bytes @ 0x4
   339                           
   340  00A4                     ??_delay:	
   341                           ; 0 bytes @ 0x4
   342                           
   343  00A4                     write_disp@digit:	
   344                           ; 0 bytes @ 0x4
   345                           
   346  00A4                     delays@y:	
   347                           ; 1 bytes @ 0x4
   348                           
   349                           
   350                           ; 2 bytes @ 0x4
   351  00A4                     	ds	1
   352  00A5                     write_disp@segment:	
   353                           
   354                           ; 1 bytes @ 0x5
   355  00A5                     	ds	1
   356  00A6                     ??_write_disp:	
   357  00A6                     delays@z:	
   358                           ; 0 bytes @ 0x6
   359                           
   360                           
   361                           ; 2 bytes @ 0x6
   362  00A6                     	ds	1
   363  00A7                     write_disp@set_clr:	
   364                           
   365                           ; 1 bytes @ 0x7
   366  00A7                     	ds	1
   367  00A8                     ??_freshen_disp:	
   368                           
   369                           ; 0 bytes @ 0x8
   370  00A8                     	ds	1
   371  00A9                     freshen_disp@d:	
   372                           
   373                           ; 2 bytes @ 0x9
   374  00A9                     	ds	2
   375  00AB                     freshen_disp@d_1755:	
   376                           
   377                           ; 2 bytes @ 0xB
   378  00AB                     	ds	2
   379  00AD                     freshen_disp@cnt:	
   380                           
   381                           ; 1 bytes @ 0xD
   382  00AD                     	ds	1
   383  00AE                     ??_main:	
   384  00AE                     main@k:	
   385                           ; 0 bytes @ 0xE
   386                           
   387                           
   388                           ; 2 bytes @ 0xE
   389  00AE                     	ds	2
   390  00B0                     main@j:	
   391                           
   392                           ; 2 bytes @ 0x10
   393  00B0                     	ds	2
   394  00B2                     main@i:	
   395                           
   396                           ; 2 bytes @ 0x12
   397  00B2                     	ds	2
   398                           
   399                           	psect	cstackCOMMON
   400  0070                     __pcstackCOMMON:	
   401  0070                     ??_txd:	
   402  0070                     ?_freshen_disp:	
   403                           ; 0 bytes @ 0x0
   404                           
   405  0070                     ?_decode_num:	
   406                           ; 0 bytes @ 0x0
   407                           
   408  0070                     ?_serial:	
   409                           ; 0 bytes @ 0x0
   410                           
   411  0070                     ?i1_delay:	
   412                           ; 0 bytes @ 0x0
   413                           
   414  0070                     ?_strcpy:	
   415                           ; 0 bytes @ 0x0
   416                           
   417  0070                     ?_strlen:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_txd:	
   421                           ; 2 bytes @ 0x0
   422                           
   423  0070                     ?_main:	
   424                           ; 2 bytes @ 0x0
   425                           
   426  0070                     txd@write_data:	
   427                           ; 2 bytes @ 0x0
   428                           
   429  0070                     decode_num@num:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     strcpy@from:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     i1delay@x:	
   436                           ; 1 bytes @ 0x0
   437                           
   438                           
   439                           ; 4 bytes @ 0x0
   440  0070                     	ds	1
   441  0071                     ??_strcpy:	
   442  0071                     ??_decode_num:	
   443                           ; 0 bytes @ 0x1
   444                           
   445  0071                     decode_num@dig:	
   446                           ; 0 bytes @ 0x1
   447                           
   448                           
   449                           ; 1 bytes @ 0x1
   450  0071                     	ds	1
   451  0072                     ??_strlen:	
   452  0072                     decode_num@temp:	
   453                           ; 0 bytes @ 0x2
   454                           
   455  0072                     strcpy@to:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0072                     strlen@s:	
   459                           ; 1 bytes @ 0x2
   460                           
   461                           
   462                           ; 1 bytes @ 0x2
   463  0072                     	ds	1
   464  0073                     strcpy@cp:	
   465  0073                     strlen@cp:	
   466                           ; 1 bytes @ 0x3
   467                           
   468                           
   469                           ; 1 bytes @ 0x3
   470  0073                     	ds	1
   471  0074                     ??i1_delay:	
   472  0074                     ?i1_write_disp:	
   473                           ; 0 bytes @ 0x4
   474                           
   475  0074                     ?_uart_txt:	
   476                           ; 0 bytes @ 0x4
   477                           
   478  0074                     i1write_disp@digit:	
   479                           ; 2 bytes @ 0x4
   480                           
   481  0074                     uart_txt@string:	
   482                           ; 1 bytes @ 0x4
   483                           
   484                           
   485                           ; 2 bytes @ 0x4
   486  0074                     	ds	1
   487  0075                     i1write_disp@segment:	
   488                           
   489                           ; 1 bytes @ 0x5
   490  0075                     	ds	1
   491  0076                     ??_uart_txt:	
   492  0076                     ??i1_write_disp:	
   493                           ; 0 bytes @ 0x6
   494                           
   495                           
   496                           ; 0 bytes @ 0x6
   497  0076                     	ds	1
   498  0077                     i1write_disp@set_clr:	
   499                           
   500                           ; 1 bytes @ 0x7
   501  0077                     	ds	3
   502                           
   503                           	psect	cstackBANK0
   504  0020                     __pcstackBANK0:	
   505  0020                     uart_txt@str:	
   506                           
   507                           ; 69 bytes @ 0x0
   508  0020                     	ds	69
   509  0065                     uart_txt@len:	
   510                           
   511                           ; 2 bytes @ 0x45
   512  0065                     	ds	2
   513  0067                     uart_txt@cnt:	
   514                           
   515                           ; 2 bytes @ 0x47
   516  0067                     	ds	2
   517  0069                     ??_serial:	
   518                           
   519                           ; 0 bytes @ 0x49
   520  0069                     	ds	5
   521                           
   522                           	psect	maintext
   523  0352                     __pmaintext:	
   524 ;;Data sizes: Strings 51, constant 0, data 69, bss 10, persistent 0 stack 0
   525 ;;Auto spaces:   Size  Autos    Used
   526 ;; COMMON          14     10      14
   527 ;; BANK0           80     78      80
   528 ;; BANK1           80     20      24
   529 ;; BANK3           96      0      69
   530 ;; BANK2           96      0       0
   531 ;;
   532 ;; Pointer list with targets:
   533 ;; ?_strlen	unsigned int  size(1) Largest target is 69
   534 ;;		 -> uart_txt@str(BANK0[69]), 
   535 ;;
   536 ;; ?_strcpy	PTR unsigned char  size(1) Largest target is 69
   537 ;;		 -> uart_txt@str(BANK0[69]), 
   538 ;;
   539 ;; strlen@s	PTR const unsigned char  size(1) Largest target is 69
   540 ;;		 -> uart_txt@str(BANK0[69]), 
   541 ;;
   542 ;; strlen@cp	PTR const unsigned char  size(1) Largest target is 69
   543 ;;		 -> uart_txt@str(BANK0[69]), 
   544 ;;
   545 ;; strcpy@from	PTR const unsigned char  size(1) Largest target is 8192
   546 ;;		 -> ROM(CODE[8192]), 
   547 ;;
   548 ;; strcpy@to	PTR unsigned char  size(1) Largest target is 69
   549 ;;		 -> uart_txt@str(BANK0[69]), 
   550 ;;
   551 ;; strcpy@cp	PTR unsigned char  size(1) Largest target is 69
   552 ;;		 -> uart_txt@str(BANK0[69]), 
   553 ;;
   554 ;; sp__strcpy	PTR unsigned char  size(1) Largest target is 69
   555 ;;		 -> uart_txt@str(BANK0[69]), 
   556 ;;
   557 ;;
   558 ;; Critical Paths under _main in COMMON
   559 ;;
   560 ;;   None.
   561 ;;
   562 ;; Critical Paths under _serial in COMMON
   563 ;;
   564 ;;   _serial->_uart_txt
   565 ;;   i1_write_disp->i1_delay
   566 ;;   _uart_txt->_strcpy
   567 ;;   _uart_txt->_strlen
   568 ;;
   569 ;; Critical Paths under _main in BANK0
   570 ;;
   571 ;;   None.
   572 ;;
   573 ;; Critical Paths under _serial in BANK0
   574 ;;
   575 ;;   _serial->_uart_txt
   576 ;;
   577 ;; Critical Paths under _main in BANK1
   578 ;;
   579 ;;   _main->_freshen_disp
   580 ;;   _freshen_disp->_write_disp
   581 ;;   _freshen_disp->_delays
   582 ;;   _write_disp->_delay
   583 ;;
   584 ;; Critical Paths under _serial in BANK1
   585 ;;
   586 ;;   None.
   587 ;;
   588 ;; Critical Paths under _main in BANK3
   589 ;;
   590 ;;   None.
   591 ;;
   592 ;; Critical Paths under _serial in BANK3
   593 ;;
   594 ;;   None.
   595 ;;
   596 ;; Critical Paths under _main in BANK2
   597 ;;
   598 ;;   None.
   599 ;;
   600 ;; Critical Paths under _serial in BANK2
   601 ;;
   602 ;;   None.
   603 ;;
   604 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   605 ;;
   606 ;;
   607 ;;Call Graph Tables:
   608 ;;
   609 ;; ---------------------------------------------------------------------------------
   610 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   611 ;; ---------------------------------------------------------------------------------
   612 ;; (0) _main                                                 6     6      0    1085
   613 ;;                                             14 BANK1      6     6      0
   614 ;;                             _delays
   615 ;;                         _write_disp
   616 ;;                          _uart_init
   617 ;;                       _freshen_disp
   618 ;; ---------------------------------------------------------------------------------
   619 ;; (1) _freshen_disp                                         6     6      0     589
   620 ;;                                              8 BANK1      6     6      0
   621 ;;                         _write_disp
   622 ;;                             _delays
   623 ;; ---------------------------------------------------------------------------------
   624 ;; (2) _write_disp                                           4     2      2     111
   625 ;;                                              4 BANK1      4     2      2
   626 ;;                              _delay
   627 ;; ---------------------------------------------------------------------------------
   628 ;; (3) _delay                                                4     0      4      23
   629 ;;                                              0 BANK1      4     0      4
   630 ;; ---------------------------------------------------------------------------------
   631 ;; (2) _delays                                               8     4      4      71
   632 ;;                                              0 BANK1      8     4      4
   633 ;; ---------------------------------------------------------------------------------
   634 ;; (1) _uart_init                                            3     1      2     110
   635 ;;                                              0 BANK1      3     1      2
   636 ;; ---------------------------------------------------------------------------------
   637 ;; Estimated maximum stack depth 3
   638 ;; ---------------------------------------------------------------------------------
   639 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   640 ;; ---------------------------------------------------------------------------------
   641 ;; (4) _serial                                               5     5      0    1170
   642 ;;                                             73 BANK0      5     5      0
   643 ;;                         _decode_num
   644 ;;                       i1_write_disp
   645 ;;                           _uart_txt
   646 ;; ---------------------------------------------------------------------------------
   647 ;; (5) i1_write_disp                                         4     2      2     367
   648 ;;                                              4 COMMON     4     2      2
   649 ;;                            i1_delay
   650 ;; ---------------------------------------------------------------------------------
   651 ;; (5) _uart_txt                                            79    77      2     346
   652 ;;                                              4 COMMON     6     4      2
   653 ;;                                              0 BANK0     73    73      0
   654 ;;                             _strcpy
   655 ;;                             _strlen
   656 ;;                                _txd
   657 ;; ---------------------------------------------------------------------------------
   658 ;; (6) i1_delay                                              4     0      4      75
   659 ;;                                              0 COMMON     4     0      4
   660 ;; ---------------------------------------------------------------------------------
   661 ;; (5) _decode_num                                           3     2      1     457
   662 ;;                                              0 COMMON     3     2      1
   663 ;; ---------------------------------------------------------------------------------
   664 ;; (6) _strlen                                               4     2      2      89
   665 ;;                                              0 COMMON     4     2      2
   666 ;; ---------------------------------------------------------------------------------
   667 ;; (7) _strcpy                                               4     3      1      73
   668 ;;                                              0 COMMON     4     3      1
   669 ;; ---------------------------------------------------------------------------------
   670 ;; (6) _txd                                                  1     1      0      22
   671 ;;                                              0 COMMON     1     1      0
   672 ;; ---------------------------------------------------------------------------------
   673 ;; Estimated maximum stack depth 7
   674 ;; ---------------------------------------------------------------------------------
   675 ;; Call Graph Graphs:
   676 ;; _main (ROOT)
   677 ;;   _delays
   678 ;;   _write_disp
   679 ;;     _delay
   680 ;;   _uart_init
   681 ;;   _freshen_disp
   682 ;;     _write_disp
   683 ;;       _delay
   684 ;;     _delays
   685 ;;
   686 ;; _serial (ROOT)
   687 ;;   _decode_num
   688 ;;   i1_write_disp
   689 ;;     i1_delay
   690 ;;   _uart_txt
   691 ;;     _strcpy
   692 ;;     _strlen
   693 ;;     _txd
   694 ;;
   695 ;; Address spaces:
   696 ;;Name               Size   Autos  Total    Cost      Usage
   697 ;;BANK3               60      0      45       9       71.9%
   698 ;;BITBANK3            60      0       0       8        0.0%
   699 ;;SFR3                 0      0       0       4        0.0%
   700 ;;BITSFR3              0      0       0       4        0.0%
   701 ;;BANK2               60      0       0      11        0.0%
   702 ;;BITBANK2            60      0       0      10        0.0%
   703 ;;SFR2                 0      0       0       5        0.0%
   704 ;;BITSFR2              0      0       0       5        0.0%
   705 ;;SFR1                 0      0       0       2        0.0%
   706 ;;BITSFR1              0      0       0       2        0.0%
   707 ;;BANK1               50     14      18       7       30.0%
   708 ;;BITBANK1            50      0       0       6        0.0%
   709 ;;CODE                 0      0       0       0        0.0%
   710 ;;DATA                 0      0      C6      12        0.0%
   711 ;;ABS                  0      0      BB       3        0.0%
   712 ;;NULL                 0      0       0       0        0.0%
   713 ;;STACK                0      0       B       2        0.0%
   714 ;;BANK0               50     4E      50       5      100.0%
   715 ;;BITBANK0            50      0       0       4        0.0%
   716 ;;SFR0                 0      0       0       1        0.0%
   717 ;;BITSFR0              0      0       0       1        0.0%
   718 ;;COMMON               E      A       E       1      100.0%
   719 ;;BITCOMMON            E      0       0       0        0.0%
   720 ;;EEDATA             100      0       0       0        0.0%
   721                           
   722                           
   723 ;; *************** function _main *****************
   724 ;; Defined at:
   725 ;;		line 272 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  i               2   18[BANK1 ] int 
   730 ;;  j               2   16[BANK1 ] int 
   731 ;;  k               2   14[BANK1 ] int 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  2  1149[COMMON] int 
   734 ;; Registers used:
   735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 17F/0
   738 ;;		On exit  : 60/0
   739 ;;		Unchanged: FFE00/0
   740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   741 ;;      Params:         0       0       0       0       0
   742 ;;      Locals:         0       0       6       0       0
   743 ;;      Temps:          0       0       0       0       0
   744 ;;      Totals:         0       0       6       0       0
   745 ;;Total ram usage:        6 bytes
   746 ;; Hardware stack levels required when called:    7
   747 ;; This function calls:
   748 ;;		_delays
   749 ;;		_write_disp
   750 ;;		_uart_init
   751 ;;		_freshen_disp
   752 ;; This function is called by:
   753 ;;		Startup code after reset
   754 ;; This function uses a non-reentrant model
   755 ;;
   756  0352                     _main:	
   757                           
   758                           ;em7segDriver.c: 273: ANSEL=0x00;
   759                           
   760                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   761  0352  1683               	bsf	3,5	;RP0=1, select bank3
   762  0353  1703               	bsf	3,6	;RP1=1, select bank3
   763  0354  0188               	clrf	8	;volatile
   764                           
   765                           ;em7segDriver.c: 274: ANSELH=0x00;
   766  0355  0189               	clrf	9	;volatile
   767                           
   768                           ;em7segDriver.c: 275: TRISA=0x00;
   769  0356  1303               	bcf	3,6	;RP1=0, select bank1
   770  0357  0185               	clrf	5	;volatile
   771                           
   772                           ;em7segDriver.c: 276: TRISB=0xFF;
   773  0358  30FF               	movlw	255
   774  0359  0086               	movwf	6	;volatile
   775                           
   776                           ;em7segDriver.c: 277: TRISC=0x00;
   777  035A  0187               	clrf	7	;volatile
   778                           
   779                           ;em7segDriver.c: 278: PORTA=0x00;
   780  035B  1283               	bcf	3,5	;RP0=0, select bank0
   781  035C  0185               	clrf	5	;volatile
   782                           
   783                           ;em7segDriver.c: 279: PORTC=0x00;
   784  035D  0187               	clrf	7	;volatile
   785                           
   786                           ;em7segDriver.c: 281: ((OPTION_REG) &= ~(1 << (7)));
   787  035E  1683               	bsf	3,5	;RP0=1, select bank1
   788  035F  1381               	bcf	1,7	;volatile
   789                           
   790                           ;em7segDriver.c: 284: ((OSCCON) |= 1 << (6));
   791  0360  170F               	bsf	15,6	;volatile
   792                           
   793                           ;em7segDriver.c: 285: ((OSCCON) |= 1 << (5));
   794  0361  168F               	bsf	15,5	;volatile
   795                           
   796                           ;em7segDriver.c: 286: ((OSCCON) |= 1 << (4));
   797  0362  160F               	bsf	15,4	;volatile
   798                           
   799                           ;em7segDriver.c: 288: if(!RB0==1){
   800  0363  1283               	bcf	3,5	;RP0=0, select bank0
   801  0364  1806               	btfsc	6,0
   802  0365  2B83               	goto	l3360
   803  0366                     l3354:	
   804                           
   805                           ;em7segDriver.c: 301: delays(5000);
   806  0366  1683               	bsf	3,5	;RP0=1, select bank1
   807  0367  3013               	movlw	19
   808  0368  01A3               	clrf	(?_delays+3)^(0+128)
   809  0369  01A2               	clrf	(?_delays+2)^(0+128)
   810  036A  00A1               	movwf	(?_delays+1)^(0+128)
   811  036B  3088               	movlw	136
   812  036C  00A0               	movwf	?_delays^(0+128)
   813  036D  120A  118A  22A0   	fcall	_delays
      +       120A  118A         
   814  0372  3000               	movlw	0
   815                           
   816                           ;em7segDriver.c: 302: write_disp(0,0,0);
   817  0373  01A4               	clrf	?_write_disp^(0+128)
   818  0374  01A5               	clrf	(?_write_disp^(0+128)+1)
   819  0375  120A  118A  22D5   	fcall	_write_disp
      +       120A  118A         
   820  037A  3001               	movlw	1
   821                           
   822                           ;em7segDriver.c: 303: write_disp(1,0,0);
   823  037B  01A4               	clrf	?_write_disp^(0+128)
   824  037C  01A5               	clrf	(?_write_disp^(0+128)+1)
   825  037D  120A  118A  22D5   	fcall	_write_disp
      +       120A  118A         
   826  0382  2B66               	goto	l3354
   827  0383                     l3360:	
   828                           
   829                           ;em7segDriver.c: 319: }
   830                           ;em7segDriver.c: 320: }
   831                           ;em7segDriver.c: 325: delays(100);
   832  0383  3064               	movlw	100
   833  0384  1683               	bsf	3,5	;RP0=1, select bank1
   834  0385  00A0               	movwf	?_delays^(0+128)
   835  0386  01A1               	clrf	(?_delays+1)^(0+128)
   836  0387  01A2               	clrf	(?_delays+2)^(0+128)
   837  0388  01A3               	clrf	(?_delays+3)^(0+128)
   838  0389  120A  118A  22A0   	fcall	_delays
      +       120A  118A         
   839  038E  3003               	movlw	3
   840                           
   841                           ;em7segDriver.c: 327: uart_init(BAUDRATE,1,0);
   842  038F  01A0               	clrf	?_uart_init^(0+128)
   843  0390  0AA0               	incf	?_uart_init^(0+128),f
   844  0391  01A1               	clrf	(?_uart_init^(0+128)+1)
   845  0392  120A  118A  23FC   	fcall	_uart_init
      +       120A  118A         
   846                           
   847                           ;em7segDriver.c: 331: for(int k=2;k>0;k--){
   848  0397  3002               	movlw	2
   849  0398  00AE               	movwf	main@k^(0+128)
   850  0399  01AF               	clrf	(main@k+1)^(0+128)
   851  039A                     l3370:	
   852                           
   853                           ;em7segDriver.c: 332: for(int j=0;j<2;j++){
   854  039A  1683               	bsf	3,5	;RP0=1, select bank1
   855  039B  1303               	bcf	3,6	;RP1=0, select bank1
   856  039C  01B0               	clrf	main@j^(0+128)
   857  039D  01B1               	clrf	(main@j+1)^(0+128)
   858  039E                     l3376:	
   859                           
   860                           ;em7segDriver.c: 333: for(int i=0;i<8;i++){
   861  039E  1683               	bsf	3,5	;RP0=1, select bank1
   862  039F  1303               	bcf	3,6	;RP1=0, select bank1
   863  03A0  01B2               	clrf	main@i^(0+128)
   864  03A1  01B3               	clrf	(main@i+1)^(0+128)
   865  03A2                     l3382:	
   866                           
   867                           ;em7segDriver.c: 334: write_disp(k-1,j,i);
   868  03A2  1683               	bsf	3,5	;RP0=1, select bank1
   869  03A3  1303               	bcf	3,6	;RP1=0, select bank1
   870  03A4  0830               	movf	main@j^(0+128),w
   871  03A5  00A4               	movwf	?_write_disp^(0+128)
   872  03A6  0832               	movf	main@i^(0+128),w
   873  03A7  00A5               	movwf	(?_write_disp^(0+128)+1)
   874  03A8  082E               	movf	main@k^(0+128),w
   875  03A9  3EFF               	addlw	255
   876  03AA  120A  118A  22D5   	fcall	_write_disp
      +       120A  118A         
   877                           
   878                           ;em7segDriver.c: 335: delays(1000);
   879  03AF  3003               	movlw	3
   880  03B0  01A3               	clrf	(?_delays+3)^(0+128)
   881  03B1  01A2               	clrf	(?_delays+2)^(0+128)
   882  03B2  00A1               	movwf	(?_delays+1)^(0+128)
   883  03B3  30E8               	movlw	232
   884  03B4  00A0               	movwf	?_delays^(0+128)
   885  03B5  120A  118A  22A0   	fcall	_delays
      +       120A  118A         
   886  03BA  0AB2               	incf	main@i^(0+128),f
   887  03BB  1903               	skipnz
   888  03BC  0AB3               	incf	(main@i+1)^(0+128),f
   889  03BD  0833               	movf	(main@i+1)^(0+128),w
   890  03BE  3A80               	xorlw	128
   891  03BF  00FF               	movwf	127
   892  03C0  3080               	movlw	128
   893  03C1  027F               	subwf	127,w
   894  03C2  1D03               	skipz
   895  03C3  2BC6               	goto	u1455
   896  03C4  3008               	movlw	8
   897  03C5  0232               	subwf	main@i^(0+128),w
   898  03C6                     u1455:	
   899  03C6  1C03               	skipc
   900  03C7  2BA2               	goto	l3382
   901  03C8  1683               	bsf	3,5	;RP0=1, select bank1
   902  03C9  1303               	bcf	3,6	;RP1=0, select bank1
   903  03CA  0AB0               	incf	main@j^(0+128),f
   904  03CB  1903               	skipnz
   905  03CC  0AB1               	incf	(main@j+1)^(0+128),f
   906  03CD  0831               	movf	(main@j+1)^(0+128),w
   907  03CE  3A80               	xorlw	128
   908  03CF  00FF               	movwf	127
   909  03D0  3080               	movlw	128
   910  03D1  027F               	subwf	127,w
   911  03D2  1D03               	skipz
   912  03D3  2BD6               	goto	u1465
   913  03D4  3002               	movlw	2
   914  03D5  0230               	subwf	main@j^(0+128),w
   915  03D6                     u1465:	
   916  03D6  1C03               	skipc
   917  03D7  2B9E               	goto	l3376
   918  03D8  30FF               	movlw	-1
   919  03D9  1683               	bsf	3,5	;RP0=1, select bank1
   920  03DA  1303               	bcf	3,6	;RP1=0, select bank1
   921  03DB  07AE               	addwf	main@k^(0+128),f
   922  03DC  1C03               	skipc
   923  03DD  03AF               	decf	(main@k+1)^(0+128),f
   924  03DE  082F               	movf	(main@k+1)^(0+128),w
   925  03DF  3A80               	xorlw	128
   926  03E0  00FF               	movwf	127
   927  03E1  3080               	movlw	128
   928  03E2  027F               	subwf	127,w
   929  03E3  1D03               	skipz
   930  03E4  2BE7               	goto	u1475
   931  03E5  3001               	movlw	1
   932  03E6  022E               	subwf	main@k^(0+128),w
   933  03E7                     u1475:	
   934  03E7  1803               	skipnc
   935  03E8  2B9A               	goto	l3370
   936  03E9                     l3396:	
   937                           
   938                           ;em7segDriver.c: 341: if(clr_flgs[0]!=0||clr_flgs[1]!=0||set_flgs[0]!=0||set_flgs[1]!=0){
   939  03E9  1683               	bsf	3,5	;RP0=1, select bank1
   940  03EA  1303               	bcf	3,6	;RP1=0, select bank1
   941  03EB  08B4               	movf	_clr_flgs^(0+128),f
   942  03EC  1D03               	skipz
   943  03ED  2BF6               	goto	l3404
   944  03EE  08B5               	movf	(_clr_flgs^(0+128)+1),f
   945  03EF  1D03               	skipz
   946  03F0  2BF6               	goto	l3404
   947  03F1  08B6               	movf	_set_flgs^(0+128),f
   948  03F2  1903               	btfsc	3,2
   949  03F3  0837               	movf	(_set_flgs^(0+128)+1),w
   950  03F4  1903               	btfsc	3,2
   951  03F5  2BE9               	goto	l3396
   952  03F6                     l3404:	
   953                           
   954                           ;em7segDriver.c: 342: freshen_disp();
   955  03F6  120A  118A  220D   	fcall	_freshen_disp
      +       120A  118A         
   956  03FB  2BE9               	goto	l3396
   957  03FC                     __end_of_main:	
   958                           
   959                           	psect	text282
   960  020D                     __ptext282:	
   961 ;; =============== function _main ends ============
   962                           
   963                           
   964 ;; *************** function _freshen_disp *****************
   965 ;; Defined at:
   966 ;;		line 122 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  d               2   11[BANK1 ] int 
   971 ;;  d               2    9[BANK1 ] int 
   972 ;;  cnt             1   13[BANK1 ] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;		None               void
   975 ;; Registers used:
   976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 60/20
   979 ;;		On exit  : 60/0
   980 ;;		Unchanged: FFE00/0
   981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   982 ;;      Params:         0       0       0       0       0
   983 ;;      Locals:         0       0       5       0       0
   984 ;;      Temps:          0       0       1       0       0
   985 ;;      Totals:         0       0       6       0       0
   986 ;;Total ram usage:        6 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; Hardware stack levels required when called:    6
   989 ;; This function calls:
   990 ;;		_write_disp
   991 ;;		_delays
   992 ;; This function is called by:
   993 ;;		_main
   994 ;; This function uses a non-reentrant model
   995 ;;
   996  020D                     _freshen_disp:	
   997                           
   998                           ;em7segDriver.c: 124: for(int d=0;d<2;d++){
   999                           
  1000                           ; Regs used in _freshen_disp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1001  020D  01A9               	clrf	freshen_disp@d^(0+128)
  1002  020E  01AA               	clrf	(freshen_disp@d+1)^(0+128)
  1003  020F                     l3270:	
  1004                           
  1005                           ;em7segDriver.c: 125: cnt=0;
  1006  020F  1683               	bsf	3,5	;RP0=1, select bank1
  1007  0210  1303               	bcf	3,6	;RP1=0, select bank1
  1008  0211  01AD               	clrf	freshen_disp@cnt^(0+128)
  1009  0212                     l3284:	
  1010                           ;em7segDriver.c: 126: while(clr_flgs[d]!=0){
  1011                           
  1012  0212  0829               	movf	freshen_disp@d^(0+128),w
  1013  0213  3EB4               	addlw	_clr_flgs& (0+255)
  1014  0214  0084               	movwf	4
  1015  0215  1383               	bcf	3,7	;select IRP bank1
  1016  0216  0880               	movf	0,f
  1017  0217  1903               	btfsc	3,2
  1018  0218  2A45               	goto	l3286
  1019                           
  1020                           ;em7segDriver.c: 127: if(((clr_flgs[d]>>cnt)&0x001)==0){cnt++;}
  1021  0219  0829               	movf	freshen_disp@d^(0+128),w
  1022  021A  3EB4               	addlw	_clr_flgs& (0+255)
  1023  021B  0084               	movwf	4
  1024  021C  0800               	movf	0,w
  1025  021D  00A8               	movwf	??_freshen_disp^(0+128)
  1026  021E  0A2D               	incf	freshen_disp@cnt^(0+128),w
  1027  021F  2A22               	goto	u1344
  1028  0220                     u1345:	
  1029  0220  1003               	clrc
  1030  0221  0CA8               	rrf	??_freshen_disp^(0+128),f
  1031  0222                     u1344:	
  1032  0222  3EFF               	addlw	-1
  1033  0223  1D03               	skipz
  1034  0224  2A20               	goto	u1345
  1035  0225  1828               	btfsc	??_freshen_disp^(0+128),0
  1036  0226  2A29               	goto	l3276
  1037  0227  0AAD               	incf	freshen_disp@cnt^(0+128),f
  1038  0228  2A12               	goto	l3284
  1039  0229                     l3276:	
  1040                           
  1041                           ;em7segDriver.c: 128: else{
  1042                           ;em7segDriver.c: 129: write_disp(0,d,cnt);
  1043  0229  0829               	movf	freshen_disp@d^(0+128),w
  1044  022A  00A4               	movwf	?_write_disp^(0+128)
  1045  022B  082D               	movf	freshen_disp@cnt^(0+128),w
  1046  022C  00A5               	movwf	(?_write_disp^(0+128)+1)
  1047  022D  3000               	movlw	0
  1048  022E  22D5  120A  118A   	fcall	_write_disp
  1049                           
  1050                           ;em7segDriver.c: 130: ((clr_flgs[d]) &= ~(1 << (cnt)));
  1051  0231  0829               	movf	freshen_disp@d^(0+128),w
  1052  0232  3EB4               	addlw	_clr_flgs& (0+255)
  1053  0233  0084               	movwf	4
  1054  0234  3001               	movlw	1
  1055  0235  00A8               	movwf	??_freshen_disp^(0+128)
  1056  0236  0A2D               	incf	freshen_disp@cnt^(0+128),w
  1057  0237  2A3A               	goto	u1364
  1058  0238                     u1365:	
  1059  0238  1003               	clrc
  1060  0239  0DA8               	rlf	??_freshen_disp^(0+128),f
  1061  023A                     u1364:	
  1062  023A  3EFF               	addlw	-1
  1063  023B  1D03               	skipz
  1064  023C  2A38               	goto	u1365
  1065  023D  0828               	movf	??_freshen_disp^(0+128),w
  1066                           
  1067                           ;em7segDriver.c: 131: cnt++;
  1068                           
  1069                           ;em7segDriver.c: 132: delays(animation_delay);
  1070  023E  2348  120A  118A   	fcall	PL2	;call to abstracted procedure
  1071  0241  22A0  120A  118A   	fcall	_delays
  1072  0244  2A12               	goto	l3284
  1073  0245                     l3286:	
  1074  0245  0AA9               	incf	freshen_disp@d^(0+128),f
  1075  0246  1903               	skipnz
  1076  0247  0AAA               	incf	(freshen_disp@d+1)^(0+128),f
  1077  0248  082A               	movf	(freshen_disp@d+1)^(0+128),w
  1078  0249  3A80               	xorlw	128
  1079  024A  00FF               	movwf	127
  1080  024B  3080               	movlw	128
  1081  024C  027F               	subwf	127,w
  1082  024D  1D03               	skipz
  1083  024E  2A51               	goto	u1385
  1084  024F  3002               	movlw	2
  1085  0250  0229               	subwf	freshen_disp@d^(0+128),w
  1086  0251                     u1385:	
  1087  0251  1C03               	skipc
  1088  0252  2A0F               	goto	l3270
  1089                           
  1090                           ;em7segDriver.c: 133: }
  1091                           ;em7segDriver.c: 134: }
  1092                           ;em7segDriver.c: 135: }
  1093                           ;em7segDriver.c: 137: for(int d=0;d<2;d++){
  1094  0253  1683               	bsf	3,5	;RP0=1, select bank1
  1095  0254  1303               	bcf	3,6	;RP1=0, select bank1
  1096  0255  01AB               	clrf	freshen_disp@d_1755^(0+128)
  1097  0256  01AC               	clrf	(freshen_disp@d_1755+1)^(0+128)
  1098  0257                     l3296:	
  1099                           
  1100                           ;em7segDriver.c: 138: cnt=0;
  1101  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1102  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1103  0259  01AD               	clrf	freshen_disp@cnt^(0+128)
  1104  025A                     l3310:	
  1105                           ;em7segDriver.c: 139: while(set_flgs[d]!=0){
  1106                           
  1107  025A  082B               	movf	freshen_disp@d_1755^(0+128),w
  1108  025B  3EB6               	addlw	_set_flgs& (0+255)
  1109  025C  0084               	movwf	4
  1110  025D  1383               	bcf	3,7	;select IRP bank1
  1111  025E  0880               	movf	0,f
  1112  025F  1903               	btfsc	3,2
  1113  0260  2A8D               	goto	l3312
  1114                           
  1115                           ;em7segDriver.c: 140: if(((set_flgs[d]>>cnt)&0x001)==0){cnt++;}
  1116  0261  082B               	movf	freshen_disp@d_1755^(0+128),w
  1117  0262  3EB6               	addlw	_set_flgs& (0+255)
  1118  0263  0084               	movwf	4
  1119  0264  0800               	movf	0,w
  1120  0265  00A8               	movwf	??_freshen_disp^(0+128)
  1121  0266  0A2D               	incf	freshen_disp@cnt^(0+128),w
  1122  0267  2A6A               	goto	u1394
  1123  0268                     u1395:	
  1124  0268  1003               	clrc
  1125  0269  0CA8               	rrf	??_freshen_disp^(0+128),f
  1126  026A                     u1394:	
  1127  026A  3EFF               	addlw	-1
  1128  026B  1D03               	skipz
  1129  026C  2A68               	goto	u1395
  1130  026D  1828               	btfsc	??_freshen_disp^(0+128),0
  1131  026E  2A71               	goto	l3302
  1132  026F  0AAD               	incf	freshen_disp@cnt^(0+128),f
  1133  0270  2A5A               	goto	l3310
  1134  0271                     l3302:	
  1135                           
  1136                           ;em7segDriver.c: 141: else{
  1137                           ;em7segDriver.c: 142: write_disp(1,d,cnt);
  1138  0271  082B               	movf	freshen_disp@d_1755^(0+128),w
  1139  0272  00A4               	movwf	?_write_disp^(0+128)
  1140  0273  082D               	movf	freshen_disp@cnt^(0+128),w
  1141  0274  00A5               	movwf	(?_write_disp^(0+128)+1)
  1142  0275  3001               	movlw	1
  1143  0276  22D5  120A  118A   	fcall	_write_disp
  1144                           
  1145                           ;em7segDriver.c: 143: ((set_flgs[d]) &= ~(1 << (cnt)));
  1146  0279  082B               	movf	freshen_disp@d_1755^(0+128),w
  1147  027A  3EB6               	addlw	_set_flgs& (0+255)
  1148  027B  0084               	movwf	4
  1149  027C  3001               	movlw	1
  1150  027D  00A8               	movwf	??_freshen_disp^(0+128)
  1151  027E  0A2D               	incf	freshen_disp@cnt^(0+128),w
  1152  027F  2A82               	goto	u1414
  1153  0280                     u1415:	
  1154  0280  1003               	clrc
  1155  0281  0DA8               	rlf	??_freshen_disp^(0+128),f
  1156  0282                     u1414:	
  1157  0282  3EFF               	addlw	-1
  1158  0283  1D03               	skipz
  1159  0284  2A80               	goto	u1415
  1160  0285  0828               	movf	??_freshen_disp^(0+128),w
  1161                           
  1162                           ;em7segDriver.c: 144: cnt++;
  1163                           
  1164                           ;em7segDriver.c: 145: delays(animation_delay);
  1165  0286  2348  120A  118A   	fcall	PL2	;call to abstracted procedure
  1166  0289  22A0  120A  118A   	fcall	_delays
  1167  028C  2A5A               	goto	l3310
  1168  028D                     l3312:	
  1169  028D  0AAB               	incf	freshen_disp@d_1755^(0+128),f
  1170  028E  1903               	skipnz
  1171  028F  0AAC               	incf	(freshen_disp@d_1755+1)^(0+128),f
  1172  0290  082C               	movf	(freshen_disp@d_1755+1)^(0+128),w
  1173  0291  3A80               	xorlw	128
  1174  0292  00FF               	movwf	127
  1175  0293  3080               	movlw	128
  1176  0294  027F               	subwf	127,w
  1177  0295  1D03               	skipz
  1178  0296  2A99               	goto	u1435
  1179  0297  3002               	movlw	2
  1180  0298  022B               	subwf	freshen_disp@d_1755^(0+128),w
  1181  0299                     u1435:	
  1182  0299  1C03               	skipc
  1183  029A  2A57               	goto	l3296
  1184                           
  1185                           ;em7segDriver.c: 146: }
  1186                           ;em7segDriver.c: 147: }
  1187                           ;em7segDriver.c: 148: }
  1188                           ;em7segDriver.c: 150: RC2 = RC3 = 0;
  1189  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1190  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1191  029D  1187               	bcf	7,3
  1192  029E  1107               	bcf	7,2
  1193  029F  0008               	return
  1194  02A0                     __end_of_freshen_disp:	
  1195  02A0                     __ptext285:	
  1196 ;; =============== function _delay ends ============
  1197                           
  1198                           
  1199 ;; *************** function _delays *****************
  1200 ;; Defined at:
  1201 ;;		line 84 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  x               4    0[BANK1 ] long 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  z               2    6[BANK1 ] unsigned int 
  1206 ;;  y               2    4[BANK1 ] unsigned int 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;		None               void
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0, btemp+1
  1211 ;; Tracked objects:
  1212 ;;		On entry : 60/20
  1213 ;;		On exit  : 60/20
  1214 ;;		Unchanged: FFF9F/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       0       4       0       0
  1217 ;;      Locals:         0       0       4       0       0
  1218 ;;      Temps:          0       0       0       0       0
  1219 ;;      Totals:         0       0       8       0       0
  1220 ;;Total ram usage:        8 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    4
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_freshen_disp
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230  02A0                     _delays:	
  1231                           
  1232                           ;em7segDriver.c: 85: unsigned int y=0, z=0;
  1233                           
  1234                           ; Regs used in _delays: [wreg+status,2+status,0+btemp+1]
  1235  02A0  01A4               	clrf	delays@y^(0+128)
  1236  02A1  01A5               	clrf	(delays@y+1)^(0+128)
  1237  02A2  01A6               	clrf	delays@z^(0+128)
  1238  02A3  01A7               	clrf	(delays@z+1)^(0+128)
  1239                           
  1240                           ;em7segDriver.c: 86: while(x>0){
  1241  02A4  2AC1               	goto	l3044
  1242  02A5                     l3034:	
  1243                           
  1244                           ;em7segDriver.c: 89: z++;}
  1245  02A5  0AA6               	incf	delays@z^(0+128),f
  1246  02A6  1903               	skipnz
  1247  02A7  0AA7               	incf	(delays@z+1)^(0+128),f
  1248  02A8                     l3036:	
  1249  02A8  3003               	movlw	3
  1250  02A9  0227               	subwf	(delays@z+1)^(0+128),w
  1251  02AA  30E8               	movlw	232
  1252  02AB  1903               	skipnz
  1253  02AC  0226               	subwf	delays@z^(0+128),w
  1254  02AD  1C03               	skipc
  1255  02AE  2AA5               	goto	l3034
  1256                           
  1257                           ;em7segDriver.c: 90: y++;
  1258  02AF  0AA4               	incf	delays@y^(0+128),f
  1259  02B0  1903               	skipnz
  1260  02B1  0AA5               	incf	(delays@y+1)^(0+128),f
  1261  02B2                     l3040:	
  1262  02B2  3001               	movlw	1
  1263  02B3  0225               	subwf	(delays@y+1)^(0+128),w
  1264  02B4  30F4               	movlw	244
  1265  02B5  1903               	skipnz
  1266  02B6  0224               	subwf	delays@y^(0+128),w
  1267  02B7  1C03               	skipc
  1268  02B8  2AA8               	goto	l3036
  1269                           
  1270                           ;em7segDriver.c: 91: }
  1271                           ;em7segDriver.c: 92: x--;
  1272  02B9  30FF               	movlw	255
  1273  02BA  07A0               	addwf	delays@x^(0+128),f
  1274  02BB  1C03               	skipc
  1275  02BC  07A1               	addwf	(delays@x+1)^(0+128),f
  1276  02BD  1C03               	skipc
  1277  02BE  07A2               	addwf	(delays@x+2)^(0+128),f
  1278  02BF  1C03               	skipc
  1279  02C0  07A3               	addwf	(delays@x+3)^(0+128),f
  1280  02C1                     l3044:	
  1281  02C1  0823               	movf	(delays@x+3)^(0+128),w
  1282  02C2  3A80               	xorlw	128
  1283  02C3  00FF               	movwf	127
  1284  02C4  3080               	movlw	128
  1285  02C5  027F               	subwf	127,w
  1286  02C6  1D03               	skipz
  1287  02C7  2AD2               	goto	u913
  1288  02C8  3000               	movlw	0
  1289  02C9  0222               	subwf	(delays@x+2)^(0+128),w
  1290  02CA  1D03               	skipz
  1291  02CB  2AD2               	goto	u913
  1292  02CC  3000               	movlw	0
  1293  02CD  0221               	subwf	(delays@x+1)^(0+128),w
  1294  02CE  1D03               	skipz
  1295  02CF  2AD2               	goto	u913
  1296  02D0  3001               	movlw	1
  1297  02D1  0220               	subwf	delays@x^(0+128),w
  1298  02D2                     u913:	
  1299  02D2  1C03               	btfss	3,0
  1300  02D3  0008               	return
  1301  02D4  2AB2               	goto	l3040
  1302  02D5                     __end_of_delays:	
  1303  02D5                     __ptext283:	
  1304 ;; =============== function _freshen_disp ends ============
  1305                           
  1306                           
  1307 ;; *************** function _write_disp *****************
  1308 ;; Defined at:
  1309 ;;		line 178 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  set_clr         1    wreg     unsigned char 
  1312 ;;  digit           1    4[BANK1 ] unsigned char 
  1313 ;;  segment         1    5[BANK1 ] unsigned char 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  set_clr         1    7[BANK1 ] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;		None               void
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 60/20
  1322 ;;		On exit  : 60/20
  1323 ;;		Unchanged: FFE00/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         0       0       2       0       0
  1326 ;;      Locals:         0       0       1       0       0
  1327 ;;      Temps:          0       0       1       0       0
  1328 ;;      Totals:         0       0       4       0       0
  1329 ;;Total ram usage:        4 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    5
  1332 ;; This function calls:
  1333 ;;		_delay
  1334 ;; This function is called by:
  1335 ;;		_freshen_disp
  1336 ;;		_main
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339  02D5                     _write_disp:	
  1340                           
  1341                           ; Regs used in _write_disp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1342                           ;write_disp@set_clr stored from wreg
  1343  02D5  00A7               	movwf	write_disp@set_clr^(0+128)
  1344                           
  1345                           ;em7segDriver.c: 179: if(digit==0){RC2 = 1;RC3 = 0;}else{RC2 = 0;RC3 = 1;}
  1346  02D6  08A4               	movf	write_disp@digit^(0+128),f
  1347  02D7  1D03               	skipz
  1348  02D8  2ADD               	goto	l1120
  1349  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  1350  02DA  1507               	bsf	7,2
  1351  02DB  1187               	bcf	7,3
  1352  02DC  2AE0               	goto	l3244
  1353  02DD                     l1120:	
  1354  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1355  02DE  1107               	bcf	7,2
  1356  02DF  1587               	bsf	7,3
  1357  02E0                     l3244:	
  1358                           
  1359                           ;em7segDriver.c: 180: delay(1000);
  1360  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  1361  02E1  3003               	movlw	3
  1362  02E2  01A3               	clrf	(?_delay+3)^(0+128)
  1363  02E3  01A2               	clrf	(?_delay+2)^(0+128)
  1364  02E4  00A1               	movwf	(?_delay+1)^(0+128)
  1365  02E5  30E8               	movlw	232
  1366  02E6  00A0               	movwf	?_delay^(0+128)
  1367  02E7  232C  120A  118A   	fcall	_delay
  1368                           
  1369                           ;em7segDriver.c: 186: if(set_clr==1){
  1370  02EA  0B27               	decfsz	write_disp@set_clr^(0+128),w
  1371  02EB  2B04               	goto	l1122
  1372                           
  1373                           ;em7segDriver.c: 187: RC0 = RC1 = 1;
  1374  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  1375  02ED  1487               	bsf	7,1
  1376  02EE  1C87               	btfss	7,1
  1377  02EF  2AF4               	goto	u1300
  1378  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  1379  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  1380  02F2  1407               	bsf	7,0
  1381  02F3  2AF7               	goto	l3250
  1382  02F4                     u1300:	
  1383  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1384  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1385  02F6  1007               	bcf	7,0
  1386  02F7                     l3250:	
  1387                           
  1388                           ;em7segDriver.c: 188: PORTA = ~(1<<segment);
  1389  02F7  3001               	movlw	1
  1390  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  1391  02F9  00A6               	movwf	??_write_disp^(0+128)
  1392  02FA  0A25               	incf	write_disp@segment^(0+128),w
  1393  02FB  2AFE               	goto	u1324
  1394  02FC                     u1325:	
  1395  02FC  1003               	clrc
  1396  02FD  0DA6               	rlf	??_write_disp^(0+128),f
  1397  02FE                     u1324:	
  1398  02FE  3EFF               	addlw	-1
  1399  02FF  1D03               	skipz
  1400  0300  2AFC               	goto	u1325
  1401  0301  0826               	movf	??_write_disp^(0+128),w
  1402  0302  3AFF               	xorlw	255
  1403  0303  2B12               	goto	L1
  1404  0304                     l1122:	
  1405                           ;em7segDriver.c: 189: }else{
  1406                           
  1407                           
  1408                           ;em7segDriver.c: 190: RC0 = RC1 = 0;
  1409  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0305  3001               	movlw	1
  1411  0306  1087               	bcf	7,1
  1412  0307  1007               	bcf	7,0
  1413                           
  1414                           ;em7segDriver.c: 191: PORTA = (1<<segment);
  1415  0308  1683               	bsf	3,5	;RP0=1, select bank1
  1416  0309  00A6               	movwf	??_write_disp^(0+128)
  1417  030A  0A25               	incf	write_disp@segment^(0+128),w
  1418  030B  2B0E               	goto	u1334
  1419  030C                     u1335:	
  1420  030C  1003               	clrc
  1421  030D  0DA6               	rlf	??_write_disp^(0+128),f
  1422  030E                     u1334:	
  1423  030E  3EFF               	addlw	-1
  1424  030F  1D03               	skipz
  1425  0310  2B0C               	goto	u1335
  1426  0311  0826               	movf	??_write_disp^(0+128),w
  1427  0312                     L1:	
  1428  0312  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0313  0085               	movwf	5	;volatile
  1430                           
  1431                           ;em7segDriver.c: 192: }
  1432                           ;em7segDriver.c: 193: delay(pulse_length);
  1433  0314  1683               	bsf	3,5	;RP0=1, select bank1
  1434  0315  3007               	movlw	7
  1435  0316  01A3               	clrf	(?_delay+3)^(0+128)
  1436  0317  01A2               	clrf	(?_delay+2)^(0+128)
  1437  0318  00A1               	movwf	(?_delay+1)^(0+128)
  1438  0319  30D0               	movlw	208
  1439  031A  00A0               	movwf	?_delay^(0+128)
  1440  031B  232C  120A  118A   	fcall	_delay
  1441                           
  1442                           ;em7segDriver.c: 194: RC2 = RC3 = 0;
  1443  031E  1283               	bcf	3,5	;RP0=0, select bank0
  1444  031F  1187               	bcf	7,3
  1445  0320  1107               	bcf	7,2
  1446                           
  1447                           ;em7segDriver.c: 195: RC0 = RC1 = 0;
  1448  0321  1087               	bcf	7,1
  1449  0322  1007               	bcf	7,0
  1450                           
  1451                           ;em7segDriver.c: 196: PORTA = 0x00;
  1452  0323  0185               	clrf	5	;volatile
  1453                           
  1454                           ;em7segDriver.c: 198: delay(19*pulse_length);
  1455  0324  1683               	bsf	3,5	;RP0=1, select bank1
  1456  0325  3094               	movlw	148
  1457  0326  01A3               	clrf	(?_delay+3)^(0+128)
  1458  0327  01A2               	clrf	(?_delay+2)^(0+128)
  1459  0328  00A1               	movwf	(?_delay+1)^(0+128)
  1460  0329  3070               	movlw	112
  1461  032A  00A0               	movwf	?_delay^(0+128)
  1462  032B  2B2C               	ljmp	l3050
  1463  032C                     __end_of_write_disp:	
  1464  032C                     __ptext284:	
  1465 ;; =============== function _write_disp ends ============
  1466                           
  1467                           
  1468 ;; *************** function _delay *****************
  1469 ;; Defined at:
  1470 ;;		line 96 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  x               4    0[BANK1 ] long 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;		None               void
  1477 ;; Registers used:
  1478 ;;		wreg, btemp+1
  1479 ;; Tracked objects:
  1480 ;;		On entry : 60/20
  1481 ;;		On exit  : 60/20
  1482 ;;		Unchanged: FFF9F/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       4       0       0
  1485 ;;      Locals:         0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0
  1487 ;;      Totals:         0       0       4       0       0
  1488 ;;Total ram usage:        4 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    4
  1491 ;; This function calls:
  1492 ;;		Nothing
  1493 ;; This function is called by:
  1494 ;;		_write_disp
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497  032C                     _delay:	
  1498  032C                     l3050:	
  1499                           ;em7segDriver.c: 97: while(x>0){
  1500                           
  1501                           ; Regs used in _delay: [wreg+btemp+1]
  1502                           
  1503  032C  0823               	movf	(delay@x+3)^(0+128),w
  1504  032D  3A80               	xorlw	128
  1505  032E  00FF               	movwf	127
  1506  032F  3080               	movlw	128
  1507  0330  027F               	subwf	127,w
  1508  0331  1D03               	skipz
  1509  0332  2B3D               	goto	u923
  1510  0333  3000               	movlw	0
  1511  0334  0222               	subwf	(delay@x+2)^(0+128),w
  1512  0335  1D03               	skipz
  1513  0336  2B3D               	goto	u923
  1514  0337  3000               	movlw	0
  1515  0338  0221               	subwf	(delay@x+1)^(0+128),w
  1516  0339  1D03               	skipz
  1517  033A  2B3D               	goto	u923
  1518  033B  3001               	movlw	1
  1519  033C  0220               	subwf	delay@x^(0+128),w
  1520  033D                     u923:	
  1521  033D  1C03               	btfss	3,0
  1522  033E  0008               	return
  1523                           
  1524                           ;em7segDriver.c: 98: x--;
  1525  033F  30FF               	movlw	255
  1526  0340  07A0               	addwf	delay@x^(0+128),f
  1527  0341  1C03               	skipc
  1528  0342  07A1               	addwf	(delay@x+1)^(0+128),f
  1529  0343  1C03               	skipc
  1530  0344  07A2               	addwf	(delay@x+2)^(0+128),f
  1531  0345  1C03               	skipc
  1532  0346  07A3               	addwf	(delay@x+3)^(0+128),f
  1533  0347  2B2C               	goto	l3050
  1534  0348                     __end_of_delay:	
  1535  0348                     PL2:	
  1536  0348  3AFF               	xorlw	255
  1537  0349  1383               	bcf	3,7	;select IRP bank1
  1538  034A  0580               	andwf	0,f
  1539  034B  30E8               	movlw	232
  1540  034C  0AAD               	incf	freshen_disp@cnt^(0+128),f
  1541  034D  00A0               	movwf	?_delays^(0+128)
  1542  034E  01A1               	clrf	(?_delays+1)^(0+128)
  1543  034F  01A2               	clrf	(?_delays+2)^(0+128)
  1544  0350  01A3               	clrf	(?_delays+3)^(0+128)
  1545  0351  0008               	return
  1546                           
  1547                           	psect	text286
  1548  03FC                     __ptext286:	
  1549 ;; =============== function _delays ends ============
  1550                           
  1551                           
  1552 ;; *************** function _uart_init *****************
  1553 ;; Defined at:
  1554 ;;		line 37 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\USART.h"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  baud            1    wreg     unsigned char 
  1557 ;;  rx_interrupt    1    0[BANK1 ] unsigned char 
  1558 ;;  tx_interrupt    1    1[BANK1 ] unsigned char 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  baud            1    2[BANK1 ] unsigned char 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  2    0[BANK1 ] int 
  1563 ;; Registers used:
  1564 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 17F/20
  1567 ;;		On exit  : 17F/20
  1568 ;;		Unchanged: FFE80/0
  1569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1570 ;;      Params:         0       0       2       0       0
  1571 ;;      Locals:         0       0       1       0       0
  1572 ;;      Temps:          0       0       0       0       0
  1573 ;;      Totals:         0       0       3       0       0
  1574 ;;Total ram usage:        3 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    4
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583  03FC                     _uart_init:	
  1584                           
  1585                           ; Regs used in _uart_init: [wreg-fsr0h+status,2+status,0]
  1586                           ;uart_init@baud stored from wreg
  1587  03FC  00A2               	movwf	uart_init@baud^(0+128)
  1588  03FD  3024               	movlw	36
  1589                           
  1590                           ;USART.h: 38: TRISC6=0;
  1591  03FE  1307               	bcf	7,6
  1592                           
  1593                           ;USART.h: 39: TRISC7=1;
  1594  03FF  1787               	bsf	7,7
  1595                           
  1596                           ;USART.h: 40: TXSTA=0b00100100;
  1597  0400  0098               	movwf	24	;volatile
  1598                           
  1599                           ;USART.h: 41: RCSTA=0b10010000;
  1600  0401  3090               	movlw	144
  1601  0402  1283               	bcf	3,5	;RP0=0, select bank0
  1602  0403  0098               	movwf	24	;volatile
  1603                           
  1604                           ;USART.h: 43: SPEN=1;
  1605  0404  1798               	bsf	24,7
  1606                           
  1607                           ;USART.h: 44: RX9=0;
  1608  0405  1318               	bcf	24,6
  1609                           
  1610                           ;USART.h: 45: SYNC=0;
  1611  0406  1683               	bsf	3,5	;RP0=1, select bank1
  1612  0407  1218               	bcf	24,4
  1613                           
  1614                           ;USART.h: 46: BRGH=1;
  1615  0408  1518               	bsf	24,2
  1616                           
  1617                           ;USART.h: 47: BRG16=1;
  1618  0409  1703               	bsf	3,6	;RP1=1, select bank3
  1619  040A  1587               	bsf	7,3
  1620                           
  1621                           ;USART.h: 49: GIE=0;
  1622  040B  138B               	bcf	11,7
  1623                           
  1624                           ;USART.h: 51: if(rx_interrupt_enable==1){
  1625  040C  1303               	bcf	3,6	;RP1=0, select bank1
  1626  040D  0B20               	decfsz	uart_init@rx_interrupt_enable^(0+128),w
  1627  040E  2C14               	goto	l2976
  1628                           
  1629                           ;USART.h: 52: CREN=1;
  1630  040F  1283               	bcf	3,5	;RP0=0, select bank0
  1631  0410  1618               	bsf	24,4
  1632                           
  1633                           ;USART.h: 53: ADDEN=1;
  1634  0411  1598               	bsf	24,3
  1635                           
  1636                           ;USART.h: 54: RCIE=1;
  1637  0412  1683               	bsf	3,5	;RP0=1, select bank1
  1638  0413  168C               	bsf	12,5
  1639  0414                     l2976:	
  1640                           
  1641                           ;USART.h: 55: }
  1642                           ;USART.h: 57: if(tx_interrupt_enable==1){
  1643  0414  0B21               	decfsz	uart_init@tx_interrupt_enable^(0+128),w
  1644  0415  2C17               	goto	l2980
  1645                           
  1646                           ;USART.h: 58: TXIE=1;
  1647  0416  160C               	bsf	12,4
  1648  0417                     l2980:	
  1649                           
  1650                           ;USART.h: 59: }
  1651                           ;USART.h: 61: if(rx_interrupt_enable || tx_interrupt_enable){
  1652  0417  08A0               	movf	uart_init@rx_interrupt_enable^(0+128),f
  1653  0418  1903               	btfsc	3,2
  1654  0419  0821               	movf	uart_init@tx_interrupt_enable^(0+128),w
  1655  041A  1903               	btfsc	3,2
  1656  041B  2C37               	goto	l3002
  1657                           
  1658                           ;USART.h: 62: PEIE=1;
  1659  041C  170B               	bsf	11,6
  1660                           
  1661                           ;USART.h: 63: GIE=1;
  1662  041D  178B               	bsf	11,7
  1663  041E  2C37               	goto	l3002
  1664  041F                     l2984:	
  1665                           
  1666                           ;USART.h: 68: SPBRG=6666;
  1667  041F  300A               	movlw	10
  1668  0420  0099               	movwf	25	;volatile
  1669                           
  1670                           ;USART.h: 69: break;
  1671  0421  0008               	return
  1672  0422                     l2986:	
  1673                           
  1674                           ;USART.h: 71: SPBRG=1666;
  1675  0422  3082               	movlw	130
  1676  0423  0099               	movwf	25	;volatile
  1677                           
  1678                           ;USART.h: 72: break;
  1679  0424  0008               	return
  1680  0425                     l2988:	
  1681                           
  1682                           ;USART.h: 74: SPBRG=832;
  1683  0425  3040               	movlw	64
  1684  0426  0099               	movwf	25	;volatile
  1685                           
  1686                           ;USART.h: 75: break;
  1687  0427  0008               	return
  1688  0428                     l2990:	
  1689                           
  1690                           ;USART.h: 77: SPBRG=207;
  1691  0428  30CF               	movlw	207
  1692  0429  0099               	movwf	25	;volatile
  1693                           
  1694                           ;USART.h: 78: break;
  1695  042A  0008               	return
  1696  042B                     l2992:	
  1697                           
  1698                           ;USART.h: 80: SPBRG=191;
  1699  042B  30BF               	movlw	191
  1700  042C  0099               	movwf	25	;volatile
  1701                           
  1702                           ;USART.h: 81: break;
  1703  042D  0008               	return
  1704  042E                     l2994:	
  1705                           
  1706                           ;USART.h: 83: SPBRG=103;
  1707  042E  3067               	movlw	103
  1708  042F  0099               	movwf	25	;volatile
  1709                           
  1710                           ;USART.h: 84: break;
  1711  0430  0008               	return
  1712  0431                     l2996:	
  1713                           
  1714                           ;USART.h: 86: SPBRG=34;
  1715  0431  3022               	movlw	34
  1716  0432  0099               	movwf	25	;volatile
  1717                           
  1718                           ;USART.h: 87: break;
  1719  0433  0008               	return
  1720  0434                     l2998:	
  1721                           
  1722                           ;USART.h: 89: SPBRG=16;
  1723  0434  3010               	movlw	16
  1724  0435  0099               	movwf	25	;volatile
  1725                           
  1726                           ;USART.h: 90: break;
  1727  0436  0008               	return
  1728  0437                     l3002:	
  1729  0437  0822               	movf	uart_init@baud^(0+128),w
  1730                           
  1731                           ; Switch size 1, requested type "space"
  1732                           ; Number of cases is 8, Range of values is 0 to 7
  1733                           ; switch strategies available:
  1734                           ; Name         Instructions Cycles
  1735                           ; simple_byte           25    13 (average)
  1736                           ; direct_byte           32     8 (fixed)
  1737                           ; jumptable            260     6 (fixed)
  1738                           ; rangetable            12     6 (fixed)
  1739                           ; spacedrange           22     9 (fixed)
  1740                           ; locatedrange           8     3 (fixed)
  1741                           ;	Chosen strategy is simple_byte
  1742  0438  3A00               	xorlw	0	; case 0
  1743  0439  1903               	skipnz
  1744  043A  2C1F               	goto	l2984
  1745  043B  3A01               	xorlw	1	; case 1
  1746  043C  1903               	skipnz
  1747  043D  2C22               	goto	l2986
  1748  043E  3A03               	xorlw	3	; case 2
  1749  043F  1903               	skipnz
  1750  0440  2C25               	goto	l2988
  1751  0441  3A01               	xorlw	1	; case 3
  1752  0442  1903               	skipnz
  1753  0443  2C28               	goto	l2990
  1754  0444  3A07               	xorlw	7	; case 4
  1755  0445  1903               	skipnz
  1756  0446  2C2B               	goto	l2992
  1757  0447  3A01               	xorlw	1	; case 5
  1758  0448  1903               	skipnz
  1759  0449  2C2E               	goto	l2994
  1760  044A  3A03               	xorlw	3	; case 6
  1761  044B  1903               	skipnz
  1762  044C  2C31               	goto	l2996
  1763  044D  3A01               	xorlw	1	; case 7
  1764  044E  1903               	skipnz
  1765  044F  2C34               	goto	l2998
  1766  0450  2C51               	goto	l1016
  1767  0451                     l1016:	
  1768  0451  0008               	return
  1769  0452                     __end_of_uart_init:	
  1770                           
  1771                           	psect	text287
  1772  0015                     __ptext287:	
  1773 ;; =============== function _uart_init ends ============
  1774                           
  1775                           
  1776 ;; *************** function _serial *****************
  1777 ;; Defined at:
  1778 ;;		line 210 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;		None               void
  1785 ;; Registers used:
  1786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 60/0
  1790 ;;		Unchanged: FFE00/0
  1791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1792 ;;      Params:         0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0
  1794 ;;      Temps:          0       5       0       0       0
  1795 ;;      Totals:         0       5       0       0       0
  1796 ;;Total ram usage:        5 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    3
  1799 ;; This function calls:
  1800 ;;		_decode_num
  1801 ;;		i1_write_disp
  1802 ;;		_uart_txt
  1803 ;; This function is called by:
  1804 ;;		Interrupt level 1
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807  0015                     _serial:	
  1808                           
  1809                           ;em7segDriver.c: 211: RA7=1;
  1810  0015  1785               	bsf	5,7
  1811                           
  1812                           ;em7segDriver.c: 212: if(RCIF){
  1813  0016  1E8C               	btfss	12,5
  1814  0017  28C2               	goto	i1l1146
  1815                           
  1816                           ;em7segDriver.c: 214: received = RCREG;
  1817  0018  081A               	movf	26,w	;volatile
  1818  0019  00FD               	movwf	_received
  1819                           
  1820                           ;em7segDriver.c: 215: address = (received&0xE0)>>5;
  1821  001A  00E9               	movwf	??_serial
  1822  001B  3005               	movlw	5
  1823  001C                     u110_25:	
  1824  001C  1003               	clrc
  1825  001D  0CE9               	rrf	??_serial,f
  1826  001E  3EFF               	addlw	-1
  1827  001F  1D03               	skipz
  1828  0020  281C               	goto	u110_25
  1829  0021  0869               	movf	??_serial,w
  1830  0022  00FA               	movwf	_address
  1831  0023  3007               	movlw	7
  1832  0024  05FA               	andwf	_address,f
  1833                           
  1834                           ;em7segDriver.c: 216: digit = ((received>>4)&0x001);
  1835  0025  0E7D               	swapf	_received,w
  1836  0026  390F               	andlw	15
  1837  0027  00EE               	movwf	_digit
  1838  0028  3001               	movlw	1
  1839  0029  05EE               	andwf	_digit,f
  1840                           
  1841                           ;em7segDriver.c: 217: data = received&0x0F;
  1842  002A  087D               	movf	_received,w
  1843  002B  00FB               	movwf	_data
  1844  002C  300F               	movlw	15
  1845  002D  05FB               	andwf	_data,f
  1846                           
  1847                           ;em7segDriver.c: 218: if(address==m_address){
  1848  002E  087A               	movf	_address,w
  1849  002F  067C               	xorwf	_m_address,w
  1850  0030  1D03               	skipz
  1851  0031  2858               	goto	i1l3148
  1852                           
  1853                           ;em7segDriver.c: 219: if(num_seg_wrt_flg==0){decode_num(digit,data);}
  1854  0032  08EF               	movf	_num_seg_wrt_flg,f
  1855  0033  1D03               	skipz
  1856  0034  283C               	goto	i1l3142
  1857  0035  087B               	movf	_data,w
  1858  0036  00F0               	movwf	?_decode_num
  1859  0037  086E               	movf	_digit,w
  1860  0038  2139  120A  118A   	fcall	_decode_num
  1861  003B  2851               	goto	i1l3146
  1862  003C                     i1l3142:	
  1863                           
  1864                           ;em7segDriver.c: 220: else{write_disp(((data>>3)&0x001),digit,0x7&data);RC2 = RC3 = 0;}
  1865  003C  087B               	movf	_data,w
  1866  003D  00F5               	movwf	?i1_write_disp+1
  1867  003E  3007               	movlw	7
  1868  003F  05F5               	andwf	?i1_write_disp+1,f
  1869  0040  086E               	movf	_digit,w
  1870  0041  00F4               	movwf	?i1_write_disp
  1871  0042  087B               	movf	_data,w
  1872  0043  00E9               	movwf	??_serial
  1873  0044  1003               	clrc
  1874  0045  0CE9               	rrf	??_serial,f
  1875  0046  1003               	clrc
  1876  0047  0CE9               	rrf	??_serial,f
  1877  0048  1003               	clrc
  1878  0049  0CE9               	rrf	??_serial,f
  1879  004A  0869               	movf	??_serial,w
  1880  004B  3901               	andlw	1
  1881  004C  21A4  120A  118A   	fcall	i1_write_disp
  1882  004F  1187               	bcf	7,3
  1883  0050  1107               	bcf	7,2
  1884  0051                     i1l3146:	
  1885                           
  1886                           ;em7segDriver.c: 221: uart_txt("ADR 0");
  1887  0051  301D               	movlw	low (STR_1-__stringbase)
  1888  0052  00F4               	movwf	?_uart_txt
  1889  0053  3080               	movlw	128
  1890  0054  00F5               	movwf	?_uart_txt+1
  1891  0055  20CF  120A  118A   	fcall	_uart_txt
  1892  0058                     i1l3148:	
  1893                           
  1894                           ;em7segDriver.c: 222: }
  1895                           ;em7segDriver.c: 224: if(address==0b111){
  1896  0058  087A               	movf	_address,w
  1897  0059  3A07               	xorlw	7
  1898  005A  1D03               	skipz
  1899  005B  28C2               	goto	i1l1146
  1900                           
  1901                           ;em7segDriver.c: 225: if(m_address==2){
  1902  005C  087C               	movf	_m_address,w
  1903  005D  3A02               	xorlw	2
  1904  005E  1D03               	skipz
  1905  005F  287B               	goto	i1l3164
  1906                           
  1907                           ;em7segDriver.c: 226: if(data==0b1001){
  1908  0060  087B               	movf	_data,w
  1909  0061  3A09               	xorlw	9
  1910  0062  1D03               	skipz
  1911  0063  286B               	goto	i1l3158
  1912                           
  1913                           ;em7segDriver.c: 227: set_flgs[1]=0b01110011;
  1914  0064  3073               	movlw	115
  1915  0065  1683               	bsf	3,5	;RP0=1, select bank1
  1916  0066  00B7               	movwf	(_set_flgs^(0+128)+1)
  1917                           
  1918                           ;em7segDriver.c: 228: clr_flgs[1]=0b10001100;
  1919  0067  308C               	movlw	140
  1920  0068  00B5               	movwf	(_clr_flgs^(0+128)+1)
  1921                           
  1922                           ;em7segDriver.c: 229: uart_txt("AM");
  1923  0069  302E               	movlw	low (STR_2-__stringbase)
  1924  006A  2875               	goto	L2
  1925  006B                     i1l3158:	
  1926                           ;em7segDriver.c: 230: }else if(data==0b1000){
  1927                           
  1928  006B  087B               	movf	_data,w
  1929  006C  3A08               	xorlw	8
  1930  006D  1D03               	skipz
  1931  006E  287B               	goto	i1l3164
  1932                           
  1933                           ;em7segDriver.c: 231: set_flgs[1]=0b01110111;
  1934  006F  3077               	movlw	119
  1935  0070  1683               	bsf	3,5	;RP0=1, select bank1
  1936  0071  00B7               	movwf	(_set_flgs^(0+128)+1)
  1937                           
  1938                           ;em7segDriver.c: 232: clr_flgs[1]=0b00001000;
  1939  0072  3008               	movlw	8
  1940  0073  00B5               	movwf	(_clr_flgs^(0+128)+1)
  1941                           
  1942                           ;em7segDriver.c: 233: uart_txt("PM");
  1943  0074  3031               	movlw	low (STR_3-__stringbase)
  1944  0075                     L2:	
  1945  0075  00F4               	movwf	?_uart_txt
  1946  0076  3080               	movlw	128
  1947  0077  00F5               	movwf	?_uart_txt+1
  1948  0078  20CF  120A  118A   	fcall	_uart_txt
  1949  007B                     i1l3164:	
  1950                           
  1951                           ;em7segDriver.c: 234: }
  1952                           ;em7segDriver.c: 235: }
  1953                           ;em7segDriver.c: 237: if(data==0b0000){
  1954  007B  08FB               	movf	_data,f
  1955  007C  1D03               	skipz
  1956  007D  288C               	goto	i1l3174
  1957                           
  1958                           ;em7segDriver.c: 238: set_flgs[0]=0x00;set_flgs[1]=0x00;
  1959  007E  1683               	bsf	3,5	;RP0=1, select bank1
  1960  007F  30FF               	movlw	255
  1961  0080  01B6               	clrf	_set_flgs^(0+128)
  1962  0081  01B7               	clrf	(_set_flgs^(0+128)+1)
  1963                           
  1964                           ;em7segDriver.c: 239: clr_flgs[0]=0xFF;clr_flgs[1]=0xFF;
  1965  0082  00B4               	movwf	_clr_flgs^(0+128)
  1966  0083  00B5               	movwf	(_clr_flgs^(0+128)+1)
  1967                           
  1968                           ;em7segDriver.c: 240: uart_txt("Clear All");
  1969  0084  3001               	movlw	low (STR_4-__stringbase)
  1970  0085  00F4               	movwf	?_uart_txt
  1971  0086  3080               	movlw	128
  1972  0087  00F5               	movwf	?_uart_txt+1
  1973  0088  20CF  120A  118A   	fcall	_uart_txt
  1974                           
  1975                           ;em7segDriver.c: 241: }else if(data==0b0001){
  1976  008B  28C2               	goto	i1l1146
  1977  008C                     i1l3174:	
  1978  008C  0B7B               	decfsz	_data,w
  1979  008D  2897               	goto	i1l3180
  1980  008E  3014               	movlw	low (STR_5-__stringbase)
  1981                           
  1982                           ;em7segDriver.c: 242: num_seg_wrt_flg=0;
  1983  008F  01EF               	clrf	_num_seg_wrt_flg
  1984                           
  1985                           ;em7segDriver.c: 243: uart_txt("Num Mode");
  1986  0090  00F4               	movwf	?_uart_txt
  1987  0091  3080               	movlw	128
  1988  0092  00F5               	movwf	?_uart_txt+1
  1989  0093  20CF  120A  118A   	fcall	_uart_txt
  1990                           
  1991                           ;em7segDriver.c: 244: }else if(data==0b0010){
  1992  0096  28C2               	goto	i1l1146
  1993  0097                     i1l3180:	
  1994  0097  087B               	movf	_data,w
  1995  0098  3A02               	xorlw	2
  1996  0099  1D03               	skipz
  1997  009A  28A5               	goto	i1l3186
  1998  009B  300B               	movlw	low (STR_6-__stringbase)
  1999                           
  2000                           ;em7segDriver.c: 245: num_seg_wrt_flg=1;
  2001  009C  01EF               	clrf	_num_seg_wrt_flg
  2002  009D  0AEF               	incf	_num_seg_wrt_flg,f
  2003                           
  2004                           ;em7segDriver.c: 246: uart_txt("Seg Mode");
  2005  009E  00F4               	movwf	?_uart_txt
  2006  009F  3080               	movlw	128
  2007  00A0  00F5               	movwf	?_uart_txt+1
  2008  00A1  20CF  120A  118A   	fcall	_uart_txt
  2009                           
  2010                           ;em7segDriver.c: 247: }else if(data==0b1111){
  2011  00A4  28C2               	goto	i1l1146
  2012  00A5                     i1l3186:	
  2013  00A5  087B               	movf	_data,w
  2014  00A6  3A0F               	xorlw	15
  2015  00A7  1D03               	skipz
  2016  00A8  28C2               	goto	i1l1146
  2017                           
  2018                           ;em7segDriver.c: 248: PORTA=0x00;
  2019  00A9  0185               	clrf	5	;volatile
  2020                           
  2021                           ;em7segDriver.c: 249: PORTC=0x00;
  2022  00AA  0187               	clrf	7	;volatile
  2023                           
  2024                           ;em7segDriver.c: 250: TRISC=0xFF;
  2025  00AB  30FF               	movlw	255
  2026  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  2027  00AD  0087               	movwf	7	;volatile
  2028                           
  2029                           ;em7segDriver.c: 251: TRISA=0xFF;
  2030  00AE  0085               	movwf	5	;volatile
  2031                           
  2032                           ;em7segDriver.c: 252: ((OPTION_REG) |= 1 << (7));
  2033  00AF  1781               	bsf	1,7	;volatile
  2034                           
  2035                           ;em7segDriver.c: 253: uart_txt("Sleep");
  2036  00B0  3023               	movlw	low (STR_7-__stringbase)
  2037  00B1  00F4               	movwf	?_uart_txt
  2038  00B2  3080               	movlw	128
  2039  00B3  00F5               	movwf	?_uart_txt+1
  2040  00B4  20CF  120A  118A   	fcall	_uart_txt
  2041  00B7  0063               	sleep	;#
  2042                           
  2043                           ;em7segDriver.c: 255: uart_txt("Wake");
  2044  00B8  3029               	movlw	low (STR_8-__stringbase)
  2045  00B9  00F4               	movwf	?_uart_txt
  2046  00BA  3080               	movlw	128
  2047  00BB  00F5               	movwf	?_uart_txt+1
  2048  00BC  20CF               	fcall	_uart_txt
  2049                           
  2050                           ;em7segDriver.c: 256: TRISA=0x00;
  2051  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  2052  00BE  0185               	clrf	5	;volatile
  2053                           
  2054                           ;em7segDriver.c: 257: TRISC6=0;
  2055  00BF  1307               	bcf	7,6
  2056                           
  2057                           ;em7segDriver.c: 258: TRISC7=1;
  2058  00C0  1787               	bsf	7,7
  2059                           
  2060                           ;em7segDriver.c: 259: ((OPTION_REG) &= ~(1 << (7)));
  2061  00C1  1381               	bcf	1,7	;volatile
  2062  00C2                     i1l1146:	
  2063                           ;em7segDriver.c: 260: }
  2064                           ;em7segDriver.c: 261: }
  2065                           ;em7segDriver.c: 262: }
  2066                           ;em7segDriver.c: 264: if(TXIF){
  2067                           
  2068                           
  2069                           ;em7segDriver.c: 267: }
  2070                           ;em7segDriver.c: 268: RA7=0;
  2071  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2072  00C3  1385               	bcf	5,7
  2073  00C4  086D               	movf	??_serial+4,w
  2074  00C5  00FF               	movwf	127
  2075  00C6  086C               	movf	??_serial+3,w
  2076  00C7  008A               	movwf	10
  2077  00C8  086B               	movf	??_serial+2,w
  2078  00C9  0084               	movwf	4
  2079  00CA  0E6A               	swapf	(??_serial+1)^0,w
  2080  00CB  0083               	movwf	3
  2081  00CC  0EFE               	swapf	126,f
  2082  00CD  0E7E               	swapf	126,w
  2083  00CE  0009               	retfie
  2084  00CF                     __end_of_serial:	
  2085  00CF                     __ptext289:	
  2086 ;; =============== function i1_write_disp ends ============
  2087                           
  2088                           
  2089 ;; *************** function _uart_txt *****************
  2090 ;; Defined at:
  2091 ;;		line 99 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\USART.h"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;  string          2    4[COMMON] int 
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  str            69    0[BANK0 ] unsigned char [69]
  2096 ;;  cnt             2   71[BANK0 ] unsigned int 
  2097 ;;  len             2   69[BANK0 ] unsigned int 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  2    4[COMMON] int 
  2100 ;; Registers used:
  2101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 160/0
  2105 ;;		Unchanged: FFE9F/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2107 ;;      Params:         2       0       0       0       0
  2108 ;;      Locals:         0      73       0       0       0
  2109 ;;      Temps:          4       0       0       0       0
  2110 ;;      Totals:         6      73       0       0       0
  2111 ;;Total ram usage:       79 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    2
  2114 ;; This function calls:
  2115 ;;		_strcpy
  2116 ;;		_strlen
  2117 ;;		_txd
  2118 ;; This function is called by:
  2119 ;;		_serial
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122  00CF                     _uart_txt:	
  2123                           
  2124                           ;USART.h: 100: char str[]="                                                             
      +                                 ";
  2125                           
  2126                           ; Regs used in _uart_txt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2127  00CF  3020               	movlw	uart_txt@str& (0+255)
  2128  00D0  0084               	movwf	4
  2129  00D1  3090               	movlw	low uart_txt@F1620
  2130  00D2  00F6               	movwf	??_uart_txt
  2131  00D3  0804               	movf	4,w
  2132  00D4  00F7               	movwf	??_uart_txt+1
  2133  00D5  3045               	movlw	69
  2134  00D6  00F8               	movwf	??_uart_txt+2
  2135  00D7                     u85_20:	
  2136  00D7  0876               	movf	??_uart_txt,w
  2137  00D8  0084               	movwf	4
  2138  00D9  1783               	bsf	3,7	;select IRP bank3
  2139  00DA  0800               	movf	0,w
  2140  00DB  00F9               	movwf	??_uart_txt+3
  2141  00DC  0AF6               	incf	??_uart_txt,f
  2142  00DD  0877               	movf	??_uart_txt+1,w
  2143  00DE  0084               	movwf	4
  2144  00DF  1383               	bcf	3,7	;select IRP bank0
  2145  00E0  0879               	movf	??_uart_txt+3,w
  2146  00E1  0080               	movwf	0
  2147  00E2  0AF7               	incf	??_uart_txt+1,f
  2148  00E3  0BF8               	decfsz	??_uart_txt+2,f
  2149  00E4  28D7               	goto	u85_20
  2150                           
  2151                           ;USART.h: 101: strcpy(str, string);
  2152  00E5  0874               	movf	uart_txt@string,w
  2153  00E6  00F0               	movwf	?_strcpy
  2154  00E7  3020               	movlw	uart_txt@str& (0+255)
  2155  00E8  2112  120A  118A   	fcall	_strcpy
  2156                           
  2157                           ;USART.h: 102: unsigned int len=strlen(str);
  2158  00EB  3020               	movlw	uart_txt@str& (0+255)
  2159  00EC  2126  120A  118A   	fcall	_strlen
  2160  00EF  0871               	movf	?_strlen+1,w
  2161  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  2162  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  2163  00F2  00E6               	movwf	uart_txt@len+1
  2164  00F3  0870               	movf	?_strlen,w
  2165  00F4  00E5               	movwf	uart_txt@len
  2166                           
  2167                           ;USART.h: 103: unsigned int cnt=0;
  2168  00F5  01E7               	clrf	uart_txt@cnt
  2169  00F6  01E8               	clrf	uart_txt@cnt+1
  2170  00F7                     i1l3018:	
  2171                           ;USART.h: 105: while(cnt<len){
  2172                           
  2173  00F7  0866               	movf	uart_txt@len+1,w
  2174  00F8  0268               	subwf	uart_txt@cnt+1,w
  2175  00F9  1D03               	skipz
  2176  00FA  28FD               	goto	u86_25
  2177  00FB  0865               	movf	uart_txt@len,w
  2178  00FC  0267               	subwf	uart_txt@cnt,w
  2179  00FD                     u86_25:	
  2180  00FD  1803               	btfsc	3,0
  2181  00FE  0008               	return
  2182                           
  2183                           ;USART.h: 106: txd(str[cnt]);
  2184  00FF  0867               	movf	uart_txt@cnt,w
  2185  0100  3E20               	addlw	uart_txt@str& (0+255)
  2186  0101  0084               	movwf	4
  2187  0102  0800               	movf	0,w
  2188  0103  210B  120A  118A   	fcall	_txd
  2189                           
  2190                           ;USART.h: 107: cnt++;
  2191  0106  1283               	bcf	3,5	;RP0=0, select bank0
  2192  0107  0AE7               	incf	uart_txt@cnt,f
  2193  0108  1903               	skipnz
  2194  0109  0AE8               	incf	uart_txt@cnt+1,f
  2195  010A  28F7               	goto	i1l3018
  2196  010B                     __end_of_uart_txt:	
  2197  010B                     __ptext294:	
  2198 ;; =============== function _strcpy ends ============
  2199                           
  2200                           
  2201 ;; *************** function _txd *****************
  2202 ;; Defined at:
  2203 ;;		line 94 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\USART.h"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  write_data      1    wreg     unsigned char 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  write_data      1    0[COMMON] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  2  1018[COMMON] int 
  2210 ;; Registers used:
  2211 ;;		wreg
  2212 ;; Tracked objects:
  2213 ;;		On entry : 160/0
  2214 ;;		On exit  : 160/20
  2215 ;;		Unchanged: FFE9F/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2217 ;;      Params:         0       0       0       0       0
  2218 ;;      Locals:         1       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0
  2220 ;;      Totals:         1       0       0       0       0
  2221 ;;Total ram usage:        1 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; This function calls:
  2224 ;;		Nothing
  2225 ;; This function is called by:
  2226 ;;		_uart_txt
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229  010B                     _txd:	
  2230                           
  2231                           ; Regs used in _txd: [wreg]
  2232                           ;txd@write_data stored from wreg
  2233  010B  00F0               	movwf	txd@write_data
  2234                           
  2235                           ;USART.h: 95: TXREG = write_data;
  2236  010C  0870               	movf	txd@write_data,w
  2237  010D  0099               	movwf	25	;volatile
  2238  010E                     i1l1019:	
  2239                           ;USART.h: 96: while(!TRMT);
  2240                           
  2241  010E  1683               	bsf	3,5	;RP0=1, select bank1
  2242  010F  1898               	btfsc	24,1
  2243  0110  0008               	return
  2244  0111  290E               	goto	i1l1019
  2245  0112                     __end_of_txd:	
  2246  0112                     __ptext293:	
  2247 ;; =============== function _strlen ends ============
  2248                           
  2249                           
  2250 ;; *************** function _strcpy *****************
  2251 ;; Defined at:
  2252 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\strcpy.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  to              1    wreg     PTR unsigned char 
  2255 ;;		 -> uart_txt@str(69), 
  2256 ;;  from            1    0[COMMON] PTR const unsigned char 
  2257 ;;		 -> ROM(8192), 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  to              1    2[COMMON] PTR unsigned char 
  2260 ;;		 -> uart_txt@str(69), 
  2261 ;;  cp              1    3[COMMON] PTR unsigned char 
  2262 ;;		 -> uart_txt@str(69), 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      PTR unsigned char 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2267 ;; Tracked objects:
  2268 ;;		On entry : 100/0
  2269 ;;		On exit  : 100/0
  2270 ;;		Unchanged: FFEFF/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2272 ;;      Params:         1       0       0       0       0
  2273 ;;      Locals:         2       0       0       0       0
  2274 ;;      Temps:          1       0       0       0       0
  2275 ;;      Totals:         4       0       0       0       0
  2276 ;;Total ram usage:        4 bytes
  2277 ;; Hardware stack levels used:    2
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_uart_txt
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284  0112                     _strcpy:	
  2285                           
  2286                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+pclath]
  2287                           ;strcpy@to stored from wreg
  2288  0112  00F2               	movwf	strcpy@to
  2289  0113  00F3               	movwf	strcpy@cp
  2290  0114                     i1l3022:	
  2291  0114  0870               	movf	strcpy@from,w
  2292  0115  0AF0               	incf	strcpy@from,f
  2293  0116  0084               	movwf	4
  2294  0117  120A  118A  2497   	fcall	stringdir
      +       120A  118A         
  2295  011C  00F1               	movwf	??_strcpy
  2296  011D  0873               	movf	strcpy@cp,w
  2297  011E  0AF3               	incf	strcpy@cp,f
  2298  011F  0084               	movwf	4
  2299  0120  0871               	movf	??_strcpy,w
  2300  0121  0080               	movwf	0
  2301  0122  0880               	movf	0,f
  2302  0123  1903               	btfsc	3,2
  2303  0124  0008               	return
  2304  0125  2914               	goto	i1l3022
  2305  0126                     __end_of_strcpy:	
  2306  0126                     __ptext292:	
  2307 ;; =============== function _decode_num ends ============
  2308                           
  2309                           
  2310 ;; *************** function _strlen *****************
  2311 ;; Defined at:
  2312 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\strlen.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;  s               1    wreg     PTR const unsigned char 
  2315 ;;		 -> uart_txt@str(69), 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  s               1    2[COMMON] PTR const unsigned char 
  2318 ;;		 -> uart_txt@str(69), 
  2319 ;;  cp              1    3[COMMON] PTR const unsigned char 
  2320 ;;		 -> uart_txt@str(69), 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  2    0[COMMON] unsigned int 
  2323 ;; Registers used:
  2324 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2325 ;; Tracked objects:
  2326 ;;		On entry : 100/0
  2327 ;;		On exit  : 100/0
  2328 ;;		Unchanged: FFEFF/0
  2329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2330 ;;      Params:         2       0       0       0       0
  2331 ;;      Locals:         2       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0
  2333 ;;      Totals:         4       0       0       0       0
  2334 ;;Total ram usage:        4 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_uart_txt
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342  0126                     _strlen:	
  2343                           
  2344                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2345                           ;strlen@s stored from wreg
  2346  0126  00F2               	movwf	strlen@s
  2347  0127  00F3               	movwf	strlen@cp
  2348  0128                     i1l3026:	
  2349  0128  0873               	movf	strlen@cp,w
  2350  0129  0AF3               	incf	strlen@cp,f
  2351  012A  0084               	movwf	4
  2352  012B  0880               	movf	0,f
  2353  012C  1D03               	skipz
  2354  012D  2928               	goto	i1l3026
  2355  012E  0872               	movf	strlen@s,w
  2356  012F  0273               	subwf	strlen@cp,w
  2357  0130  00F0               	movwf	?_strlen
  2358  0131  01F1               	clrf	?_strlen+1
  2359  0132  1BF0               	btfsc	?_strlen,7
  2360  0133  03F1               	decf	?_strlen+1,f
  2361  0134  30FF               	movlw	-1
  2362  0135  07F0               	addwf	?_strlen,f
  2363  0136  1C03               	skipc
  2364  0137  03F1               	decf	?_strlen+1,f
  2365  0138  0008               	return
  2366  0139                     __end_of_strlen:	
  2367  0139                     __ptext291:	
  2368 ;; =============== function i1_delay ends ============
  2369                           
  2370                           
  2371 ;; *************** function _decode_num *****************
  2372 ;; Defined at:
  2373 ;;		line 154 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  dig             1    wreg     unsigned char 
  2376 ;;  num             1    0[COMMON] unsigned char 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  dig             1    1[COMMON] unsigned char 
  2379 ;;  temp            1    2[COMMON] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2384 ;; Tracked objects:
  2385 ;;		On entry : 60/0
  2386 ;;		On exit  : 160/0
  2387 ;;		Unchanged: FFE9F/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2389 ;;      Params:         1       0       0       0       0
  2390 ;;      Locals:         2       0       0       0       0
  2391 ;;      Temps:          0       0       0       0       0
  2392 ;;      Totals:         3       0       0       0       0
  2393 ;;Total ram usage:        3 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_serial
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401  0139                     _decode_num:	
  2402                           
  2403                           ; Regs used in _decode_num: [wreg-fsr0h+status,2+status,0]
  2404                           ;decode_num@dig stored from wreg
  2405  0139  00F1               	movwf	decode_num@dig
  2406                           
  2407                           ;em7segDriver.c: 155: unsigned char temp = 0;
  2408  013A  01F2               	clrf	decode_num@temp
  2409                           
  2410                           ;em7segDriver.c: 157: if(num == 0){temp=0b00111111;}
  2411  013B  08F0               	movf	decode_num@num,f
  2412  013C  1D03               	skipz
  2413  013D  2940               	goto	i1l3058
  2414  013E  303F               	movlw	63
  2415  013F  2992               	goto	L16
  2416  0140                     i1l3058:	
  2417                           
  2418                           ;em7segDriver.c: 158: else if(num == 1){temp=0b00000011;}
  2419  0140  0B70               	decfsz	decode_num@num,w
  2420  0141  2944               	goto	i1l3062
  2421  0142  3003               	movlw	3
  2422  0143  2992               	goto	L16
  2423  0144                     i1l3062:	
  2424                           
  2425                           ;em7segDriver.c: 159: else if(num == 2){temp=0b01011011;}
  2426  0144  0870               	movf	decode_num@num,w
  2427  0145  3A02               	xorlw	2
  2428  0146  1D03               	skipz
  2429  0147  294A               	goto	i1l3066
  2430  0148  305B               	movlw	91
  2431  0149  2992               	goto	L16
  2432  014A                     i1l3066:	
  2433                           
  2434                           ;em7segDriver.c: 160: else if(num == 3){temp=0b01001111;}
  2435  014A  0870               	movf	decode_num@num,w
  2436  014B  3A03               	xorlw	3
  2437  014C  1D03               	skipz
  2438  014D  2950               	goto	i1l3070
  2439  014E  304F               	movlw	79
  2440  014F  2992               	goto	L16
  2441  0150                     i1l3070:	
  2442                           
  2443                           ;em7segDriver.c: 161: else if(num == 4){temp=0b01100110;}
  2444  0150  0870               	movf	decode_num@num,w
  2445  0151  3A04               	xorlw	4
  2446  0152  1D03               	skipz
  2447  0153  2956               	goto	i1l3074
  2448  0154  3066               	movlw	102
  2449  0155  2992               	goto	L16
  2450  0156                     i1l3074:	
  2451                           
  2452                           ;em7segDriver.c: 162: else if(num == 5){temp=0b01101101;}
  2453  0156  0870               	movf	decode_num@num,w
  2454  0157  3A05               	xorlw	5
  2455  0158  1D03               	skipz
  2456  0159  295C               	goto	i1l3078
  2457  015A  306D               	movlw	109
  2458  015B  2992               	goto	L16
  2459  015C                     i1l3078:	
  2460                           
  2461                           ;em7segDriver.c: 163: else if(num == 6){temp=0b01111101;}
  2462  015C  0870               	movf	decode_num@num,w
  2463  015D  3A06               	xorlw	6
  2464  015E  1D03               	skipz
  2465  015F  2962               	goto	i1l3082
  2466  0160  307D               	movlw	125
  2467  0161  2992               	goto	L16
  2468  0162                     i1l3082:	
  2469                           
  2470                           ;em7segDriver.c: 164: else if(num == 7){temp=0b00000111;}
  2471  0162  0870               	movf	decode_num@num,w
  2472  0163  3A07               	xorlw	7
  2473  0164  1D03               	skipz
  2474  0165  2968               	goto	i1l3086
  2475  0166  3007               	movlw	7
  2476  0167  2992               	goto	L16
  2477  0168                     i1l3086:	
  2478                           
  2479                           ;em7segDriver.c: 165: else if(num == 8){temp=0b01111111;}
  2480  0168  0870               	movf	decode_num@num,w
  2481  0169  3A08               	xorlw	8
  2482  016A  1D03               	skipz
  2483  016B  296E               	goto	i1l3090
  2484  016C  307F               	movlw	127
  2485  016D  2992               	goto	L16
  2486  016E                     i1l3090:	
  2487                           
  2488                           ;em7segDriver.c: 166: else if(num == 9){temp=0b01101111;}
  2489  016E  0870               	movf	decode_num@num,w
  2490  016F  3A09               	xorlw	9
  2491  0170  1D03               	skipz
  2492  0171  2974               	goto	i1l3094
  2493  0172  306F               	movlw	111
  2494  0173  2992               	goto	L16
  2495  0174                     i1l3094:	
  2496                           
  2497                           ;em7segDriver.c: 167: else if(num == 10){temp=0b00000001;}
  2498  0174  0870               	movf	decode_num@num,w
  2499  0175  3A0A               	xorlw	10
  2500  0176  1D03               	skipz
  2501  0177  297B               	goto	i1l3098
  2502  0178  01F2               	clrf	decode_num@temp
  2503  0179  0AF2               	incf	decode_num@temp,f
  2504  017A  2998               	goto	i1l3118
  2505  017B                     i1l3098:	
  2506                           
  2507                           ;em7segDriver.c: 168: else if(num == 11){temp=0b00001000;}
  2508  017B  0870               	movf	decode_num@num,w
  2509  017C  3A0B               	xorlw	11
  2510  017D  1D03               	skipz
  2511  017E  2981               	goto	i1l3102
  2512  017F  3008               	movlw	8
  2513  0180  2992               	goto	L16
  2514  0181                     i1l3102:	
  2515                           
  2516                           ;em7segDriver.c: 169: else if(num == 12){temp=0b01000000;}
  2517  0181  0870               	movf	decode_num@num,w
  2518  0182  3A0C               	xorlw	12
  2519  0183  1D03               	skipz
  2520  0184  2987               	goto	i1l3106
  2521  0185  3040               	movlw	64
  2522  0186  2992               	goto	L16
  2523  0187                     i1l3106:	
  2524                           
  2525                           ;em7segDriver.c: 170: else if(num == 13){temp=0b00001001;}
  2526  0187  0870               	movf	decode_num@num,w
  2527  0188  3A0D               	xorlw	13
  2528  0189  1D03               	skipz
  2529  018A  298D               	goto	i1l3110
  2530  018B  3009               	movlw	9
  2531  018C  2992               	goto	L16
  2532  018D                     i1l3110:	
  2533                           
  2534                           ;em7segDriver.c: 171: else if(num == 14){temp=0b01001000;}
  2535  018D  0870               	movf	decode_num@num,w
  2536  018E  3A0E               	xorlw	14
  2537  018F  1D03               	skipz
  2538  0190  2994               	goto	i1l3114
  2539  0191  3048               	movlw	72
  2540  0192                     L16:	
  2541  0192  00F2               	movwf	decode_num@temp
  2542  0193  2998               	goto	i1l3118
  2543  0194                     i1l3114:	
  2544                           
  2545                           ;em7segDriver.c: 172: else if(num == 15){temp=0b00000000;}
  2546  0194  0870               	movf	decode_num@num,w
  2547  0195  3A0F               	xorlw	15
  2548  0196  1903               	btfsc	3,2
  2549  0197  01F2               	clrf	decode_num@temp
  2550  0198                     i1l3118:	
  2551                           
  2552                           ;em7segDriver.c: 174: set_flgs[dig]=temp;
  2553  0198  0871               	movf	decode_num@dig,w
  2554  0199  3EB6               	addlw	_set_flgs& (0+255)
  2555  019A  0084               	movwf	4
  2556  019B  0872               	movf	decode_num@temp,w
  2557  019C  1383               	bcf	3,7	;select IRP bank1
  2558  019D  0080               	movwf	0
  2559                           
  2560                           ;em7segDriver.c: 175: clr_flgs[dig]=~temp;
  2561  019E  0871               	movf	decode_num@dig,w
  2562  019F  3EB4               	addlw	_clr_flgs& (0+255)
  2563  01A0  0084               	movwf	4
  2564  01A1  0972               	comf	decode_num@temp,w
  2565  01A2  0080               	movwf	0
  2566  01A3  0008               	return
  2567  01A4                     __end_of_decode_num:	
  2568  01A4                     __ptext288:	
  2569 ;; =============== function _serial ends ============
  2570                           
  2571                           
  2572 ;; *************** function i1_write_disp *****************
  2573 ;; Defined at:
  2574 ;;		line 178 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  write_disp      1    wreg     unsigned char 
  2577 ;;  write_disp      1    4[COMMON] unsigned char 
  2578 ;;  write_disp      1    5[COMMON] unsigned char 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  write_disp      1    7[COMMON] unsigned char 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;		None               void
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 60/0
  2587 ;;		On exit  : 60/0
  2588 ;;		Unchanged: FFE00/0
  2589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2590 ;;      Params:         2       0       0       0       0
  2591 ;;      Locals:         1       0       0       0       0
  2592 ;;      Temps:          1       0       0       0       0
  2593 ;;      Totals:         4       0       0       0       0
  2594 ;;Total ram usage:        4 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    1
  2597 ;; This function calls:
  2598 ;;		i1_delay
  2599 ;; This function is called by:
  2600 ;;		_serial
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603  01A4                     i1_write_disp:	
  2604                           
  2605                           ; Regs used in i1_write_disp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2606                           ;i1write_disp@set_clr stored from wreg
  2607  01A4  00F7               	movwf	i1write_disp@set_clr
  2608                           
  2609                           ;em7segDriver.c: 179: if(digit==0){RC2 = 1;RC3 = 0;}else{RC2 = 0;RC3 = 1;}
  2610  01A5  08F4               	movf	i1write_disp@digit,f
  2611  01A6  1D03               	skipz
  2612  01A7  29AB               	goto	i1l1120
  2613  01A8  1507               	bsf	7,2
  2614  01A9  1187               	bcf	7,3
  2615  01AA  29AD               	goto	i1l3220
  2616  01AB                     i1l1120:	
  2617  01AB  1107               	bcf	7,2
  2618  01AC  1587               	bsf	7,3
  2619  01AD                     i1l3220:	
  2620                           
  2621                           ;em7segDriver.c: 180: delay(1000);
  2622  01AD  3003               	movlw	3
  2623  01AE  01F3               	clrf	?i1_delay+3
  2624  01AF  01F2               	clrf	?i1_delay+2
  2625  01B0  00F1               	movwf	?i1_delay+1
  2626  01B1  30E8               	movlw	232
  2627  01B2  00F0               	movwf	?i1_delay
  2628  01B3  21F1  120A  118A   	fcall	i1_delay
  2629                           
  2630                           ;em7segDriver.c: 186: if(set_clr==1){
  2631  01B6  0B77               	decfsz	i1write_disp@set_clr,w
  2632  01B7  29CE               	goto	i1l1122
  2633                           
  2634                           ;em7segDriver.c: 187: RC0 = RC1 = 1;
  2635  01B8  1487               	bsf	7,1
  2636  01B9  1C87               	btfss	7,1
  2637  01BA  29BF               	goto	u124_20
  2638  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2639  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2640  01BD  1407               	bsf	7,0
  2641  01BE  29C2               	goto	i1l3226
  2642  01BF                     u124_20:	
  2643  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2644  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2645  01C1  1007               	bcf	7,0
  2646  01C2                     i1l3226:	
  2647                           
  2648                           ;em7segDriver.c: 188: PORTA = ~(1<<segment);
  2649  01C2  3001               	movlw	1
  2650  01C3  00F6               	movwf	??i1_write_disp
  2651  01C4  0A75               	incf	i1write_disp@segment,w
  2652  01C5  29C8               	goto	u126_24
  2653  01C6                     u126_25:	
  2654  01C6  1003               	clrc
  2655  01C7  0DF6               	rlf	??i1_write_disp,f
  2656  01C8                     u126_24:	
  2657  01C8  3EFF               	addlw	-1
  2658  01C9  1D03               	skipz
  2659  01CA  29C6               	goto	u126_25
  2660  01CB  0876               	movf	??i1_write_disp,w
  2661  01CC  3AFF               	xorlw	255
  2662  01CD  29DA               	goto	L3
  2663  01CE                     i1l1122:	
  2664                           ;em7segDriver.c: 189: }else{
  2665                           
  2666  01CE  3001               	movlw	1
  2667                           
  2668                           ;em7segDriver.c: 190: RC0 = RC1 = 0;
  2669  01CF  1087               	bcf	7,1
  2670  01D0  1007               	bcf	7,0
  2671                           
  2672                           ;em7segDriver.c: 191: PORTA = (1<<segment);
  2673  01D1  00F6               	movwf	??i1_write_disp
  2674  01D2  0A75               	incf	i1write_disp@segment,w
  2675  01D3  29D6               	goto	u127_24
  2676  01D4                     u127_25:	
  2677  01D4  1003               	clrc
  2678  01D5  0DF6               	rlf	??i1_write_disp,f
  2679  01D6                     u127_24:	
  2680  01D6  3EFF               	addlw	-1
  2681  01D7  1D03               	skipz
  2682  01D8  29D4               	goto	u127_25
  2683  01D9  0876               	movf	??i1_write_disp,w
  2684  01DA                     L3:	
  2685  01DA  0085               	movwf	5	;volatile
  2686                           
  2687                           ;em7segDriver.c: 192: }
  2688                           ;em7segDriver.c: 193: delay(pulse_length);
  2689  01DB  3007               	movlw	7
  2690  01DC  01F3               	clrf	?i1_delay+3
  2691  01DD  01F2               	clrf	?i1_delay+2
  2692  01DE  00F1               	movwf	?i1_delay+1
  2693  01DF  30D0               	movlw	208
  2694  01E0  00F0               	movwf	?i1_delay
  2695  01E1  21F1  120A  118A   	fcall	i1_delay
  2696                           
  2697                           ;em7segDriver.c: 194: RC2 = RC3 = 0;
  2698  01E4  1187               	bcf	7,3
  2699  01E5  1107               	bcf	7,2
  2700                           
  2701                           ;em7segDriver.c: 195: RC0 = RC1 = 0;
  2702  01E6  1087               	bcf	7,1
  2703  01E7  1007               	bcf	7,0
  2704                           
  2705                           ;em7segDriver.c: 196: PORTA = 0x00;
  2706  01E8  0185               	clrf	5	;volatile
  2707                           
  2708                           ;em7segDriver.c: 198: delay(19*pulse_length);
  2709  01E9  3094               	movlw	148
  2710  01EA  01F3               	clrf	?i1_delay+3
  2711  01EB  01F2               	clrf	?i1_delay+2
  2712  01EC  00F1               	movwf	?i1_delay+1
  2713  01ED  3070               	movlw	112
  2714  01EE  00F0               	movwf	?i1_delay
  2715  01EF  21F1               	fcall	i1_delay
  2716  01F0  0008               	return
  2717  01F1                     __end_ofi1_write_disp:	
  2718  01F1                     __ptext290:	
  2719 ;; =============== function _uart_txt ends ============
  2720                           
  2721                           
  2722 ;; *************** function i1_delay *****************
  2723 ;; Defined at:
  2724 ;;		line 96 in file "C:\Users\Shawn Maxwell\Documents\MPLAB Project Files\EM7SEG\em7segDriver.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  delay           4    0[COMMON] long 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		wreg, btemp+1
  2733 ;; Tracked objects:
  2734 ;;		On entry : 60/0
  2735 ;;		On exit  : 60/0
  2736 ;;		Unchanged: FFF9F/0
  2737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2738 ;;      Params:         4       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0
  2741 ;;      Totals:         4       0       0       0       0
  2742 ;;Total ram usage:        4 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; This function calls:
  2745 ;;		Nothing
  2746 ;; This function is called by:
  2747 ;;		i1_write_disp
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750  01F1                     i1_delay:	
  2751  01F1                     i1l3214:	
  2752                           ;em7segDriver.c: 97: while(x>0){
  2753                           
  2754                           ; Regs used in i1_delay: [wreg+btemp+1]
  2755                           
  2756  01F1  0873               	movf	i1delay@x+3,w
  2757  01F2  3A80               	xorlw	128
  2758  01F3  00FF               	movwf	127
  2759  01F4  3080               	movlw	128
  2760  01F5  027F               	subwf	127,w
  2761  01F6  1D03               	skipz
  2762  01F7  2A02               	goto	u121_23
  2763  01F8  3000               	movlw	0
  2764  01F9  0272               	subwf	i1delay@x+2,w
  2765  01FA  1D03               	skipz
  2766  01FB  2A02               	goto	u121_23
  2767  01FC  3000               	movlw	0
  2768  01FD  0271               	subwf	i1delay@x+1,w
  2769  01FE  1D03               	skipz
  2770  01FF  2A02               	goto	u121_23
  2771  0200  3001               	movlw	1
  2772  0201  0270               	subwf	i1delay@x,w
  2773  0202                     u121_23:	
  2774  0202  1C03               	btfss	3,0
  2775  0203  0008               	return
  2776                           
  2777                           ;em7segDriver.c: 98: x--;
  2778  0204  30FF               	movlw	255
  2779  0205  07F0               	addwf	i1delay@x,f
  2780  0206  1C03               	skipc
  2781  0207  07F1               	addwf	i1delay@x+1,f
  2782  0208  1C03               	skipc
  2783  0209  07F2               	addwf	i1delay@x+2,f
  2784  020A  1C03               	skipc
  2785  020B  07F3               	addwf	i1delay@x+3,f
  2786  020C  29F1               	goto	i1l3214
  2787  020D                     __end_ofi1_delay:	
  2788                           
  2789                           	psect	intentry
  2790  0004                     __pintentry:	
  2791                           ; Regs used in _serial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2792                           
  2793  0004                     interrupt_function:	
  2794  007E                     saved_w	set	btemp
  2795  0004  00FE               	movwf	btemp
  2796  0005  0E03               	swapf	3,w
  2797  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2798  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2799  0008  00EA               	movwf	??_serial+1
  2800  0009  0804               	movf	4,w
  2801  000A  00EB               	movwf	??_serial+2
  2802  000B  080A               	movf	10,w
  2803  000C  00EC               	movwf	??_serial+3
  2804  000D  087F               	movf	btemp+1,w
  2805  000E  00ED               	movwf	??_serial+4
  2806  000F  120A  118A  2815   	ljmp	_serial
  2807                           
  2808                           	psect	text295
  2809  0000                     __ptext295:	
  2810 ;; =============== function _txd ends ============
  2811                           
  2812  007E                     btemp	set	126	;btemp
  2813  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Wed Nov 28 18:41:01 2018

              uart_txt@string 0074                             pc 0002                            fsr 0004  
                         _GIE 005F                           _RB0 0030                           _RC0 0038  
                         _RC1 0039                           _RC2 003A                           _RC3 003B  
                         _RA7 002F                           u913 02D2                           u923 033D  
                         _RX9 00C6                           fsr0 0004                           _txd 010B  
                         indf 0000                          l1016 0451                          l1120 02DD  
                        l1122 0304                          l1124 0000                          l1054 0000  
                        l1048 0000                          l3002 0437                          l1083 0000  
                        l3040 02B2                          l3032 0000                          l3034 02A5  
                        l3050 032C                          l3036 02A8                          l3044 02C1  
                        l3302 0271                          l3310 025A                          l3240 0000  
                        l3312 028D                          l3304 0000                          l3320 0000  
                        l3250 02F7                          l3314 0000                          l3306 0000  
                        l3330 0000                          l3322 0000                          l3260 0000  
                        l3252 0000                          l3244 02E0                          l3308 0000  
                        l3404 03F6                          l3332 0000                          l3324 0000  
                        l3316 0000                          l3262 0000                          l3246 0000  
                        l3270 020F                          l3334 0000                          l3326 0000  
                        l3318 0000                          l3256 0000                          l3248 0000  
                        l3280 0000                          l3264 0000                          l3360 0383  
                        l3328 0000                          l3258 0000                          l3282 0000  
                        l3370 039A                          l3362 0000                          l3354 0366  
                        l3276 0229                          l3284 0212                          l3364 0000  
                        l3356 0000                          l3286 0245                          l3278 0000  
                        l3390 0000                          l3382 03A2                          l3358 0000  
                        l3296 0257                          l3288 0000                          l3384 0000  
                        l3376 039E                          l3394 0000                          l3386 0000  
                        l3396 03E9                          l2960 0000                          l2970 0000  
                        l2962 0000                          l2980 0417                          l2972 0000  
                        l2964 0000                          l2990 0428                          l2974 0000  
                        l2966 0000                          l2958 0000                          l2992 042B  
                        l2984 041F                          l2976 0414                          l2968 0000  
                        l2994 042E                          l2986 0422                          l2978 0000  
                        l2996 0431                          l2988 0425                          l2998 0434  
                        STR_1 04B9                          STR_2 04CA                          STR_3 04CD  
                        STR_4 049D                          STR_5 04B0                          ?_txd 0070  
                        STR_6 04A7                          STR_7 04BF                          STR_8 04C5  
                        _BRGH 04C2                          _CREN 00C4                          u1300 02F4  
                        u1324 02FE                          u1325 02FC                          u1334 030E  
                        u1414 0282                          u1335 030C                          u1415 0280  
                        u1344 0222                          u1345 0220                          u1435 0299  
                        u1364 023A                          u1365 0238                          u1455 03C6  
                        u1385 0251                          u1465 03D6                          u1394 026A  
                        u1395 0268                          u1475 03E7                          _PEIE 005E  
                        _RCIE 0465                          _RCIF 0065                          _SPEN 00C7  
                        _TRMT 04C1                          _TXIE 0464                          _TXIF 0064  
                        _SYNC 04C4                          _data 007B                          _main 0352  
                        btemp 007E               __end_ofi1_delay 020D                          start 0012  
                       ??_txd 0070          __end_ofi1_write_disp 01F1                         _ADDEN 00C3  
                       ?_main 0070                         _BRG16 0C3B                         _ANSEL 0188  
         i1write_disp@segment 0075                         _RCREG 001A                         _RCSTA 0018  
         i1write_disp@set_clr 0077                         _SPBRG 0099                         _PORTA 0005  
                       _PORTC 0007                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         u85_20 00D7                         u86_25 00FD  
                       _TXREG 0019                         _TXSTA 0098                         _delay 032C  
                       _digit 006E                         main@i 00B2                         main@j 00B0  
                       main@k 00AE                         pclath 000A                         status 0003  
                       wtemp0 007E                 ?_freshen_disp 0070                  __end_of_main 03FC  
                      ??_main 00AE                        ?_delay 00A0                        _ANSELH 0189  
             write_disp@digit 00A4                     ??i1_delay 0074                        i1l1022 0000  
                      i1l1030 0000                        i1l1120 01AB                        i1l1122 01CE  
                      i1l1019 010E                        i1l1124 0000                        i1l2101 0000  
                      i1l1117 0000                        u110_25 001C                        i1l1054 0000  
                      i1l3010 0000                        i1l1146 00C2                        i1l2107 0000  
                      i1l1147 0000                        i1l3004 0000                        i1l3020 0000  
                      i1l3012 0000                        i1l3022 0114                        i1l3110 018D  
                      i1l3102 0181                        i1l3006 0000                        i1l3024 0000  
                      i1l3120 0000                        i1l3016 0000                        i1l3008 0000  
                      i1l3200 0000                        i1l3026 0128                        i1l3114 0194  
                      i1l3106 0187                        i1l3210 0000                        i1l3018 00F7  
                      i1l3202 0000                        i1l3130 0000                        i1l3122 0000  
                      i1l3060 0000                        i1l3052 0000                        i1l3220 01AD  
                      i1l3204 0000                        i1l3132 0000                        i1l3070 0150  
                      i1l3062 0144                        i1l3118 0198                        i1l3054 0000  
                      i1l3214 01F1                        i1l3222 0000                        i1l3206 0000  
                      i1l3142 003C                        i1l3134 0000                        i1l3126 0000  
                      i1l3232 0000                        i1l3224 0000                        i1l3216 0000  
                      i1l3144 0000                        i1l3136 0000                        i1l3128 0000  
                      i1l3090 016E                        i1l3082 0162                        i1l3074 0156  
                      i1l3066 014A                        i1l3058 0140                        i1l3234 0000  
                      i1l3226 01C2                        i1l3170 0000                        i1l3162 0000  
                      i1l3146 0051                        u121_23 0202                        i1l3236 0000  
                      i1l3228 0000                        i1l3180 0097                        i1l3172 0000  
                      i1l3156 0000                        i1l3164 007B                        i1l3148 0058  
                      i1l3094 0174                        i1l3086 0168                        i1l3078 015C  
                      i1l3238 0000                        i1l3190 0000                        i1l3174 008C  
                      i1l3158 006B                        i1l3192 0000                        i1l3184 0000  
                      i1l3176 0000                        i1l3168 0000                        i1l3098 017B  
                      i1l3194 0000                        i1l3186 00A5                        i1l3178 0000  
                      i1l3196 0000                        i1l3198 0000                        u124_20 01BF  
                      u126_24 01C8                        u126_25 01C6                        u127_24 01D6  
                      u127_25 01D4                        _OSCCON 008F                        _TRISC6 043E  
                      _TRISC7 043F                ??_freshen_disp 00A8                        _delays 02A0  
                      delay@x 00A0                        _serial 0015                        _strcpy 0112  
                      _strlen 0126                        saved_w 007E              __end_of_uart_txt 010B  
               txd@write_data 0070         __size_ofi1_write_disp 004D                __pcstackCOMMON 0070  
                __pidataBANK3 0452                 __end_of_delay 0348                       ??_delay 00A4  
                  __pbssBANK0 006E                    __pbssBANK1 00B4                 decode_num@dig 0071  
                  _decode_num 0139                 decode_num@num 0070                  i1_write_disp 01A4  
                  __pmaintext 0352                       ?_delays 00A0                    __pintentry 0004  
                     ?_serial 0070                       ?_strcpy 0070                       ?_strlen 0070  
          __size_of_uart_init 0056          __end_of_freshen_disp 02A0               _num_seg_wrt_flg 006F  
                     i1_delay 01F1                     ?_uart_txt 0074               __size_of_delays 0035  
                     _address 007A               __size_of_serial 00BA               __size_of_strcpy 0014  
             __size_of_strlen 0013                  __size_of_txd 0007                       delays@x 00A0  
                     delays@y 00A4                       delays@z 00A6          end_of_initialization 04E7  
                 ?_decode_num 0070                       init_ram 04EF             __end_of_uart_init 0452  
                  ??_uart_txt 0076                       strlen@s 0072                   uart_txt@cnt 0067  
                 uart_txt@len 0065                   uart_txt@str 0020  uart_init@tx_interrupt_enable 00A1  
       __size_of_freshen_disp 0093                __end_of_delays 02D5                    _write_disp 02D5  
         __size_of_decode_num 006B                __end_of_serial 00CF                __end_of_strcpy 0126  
              __end_of_strlen 0139           start_initialization 04D0                   __end_of_txd 0112  
             freshen_disp@cnt 00AD                  _freshen_disp 020D                      ??_delays 00A4  
                 __pdataBANK3 0190                      ??_serial 0069                      ??_strcpy 0071  
                    ??_strlen 0072                   __pbssCOMMON 007A                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0                decode_num@temp 0072                      ?i1_delay 0070  
               freshen_disp@d 00A9                     __ptext290 01F1                     __ptext282 020D  
                   __ptext291 0139                     __ptext283 02D5                     __ptext292 0126  
                   __ptext284 032C                     __ptext293 0112                     __ptext285 02A0  
                   __ptext294 010B                     __ptext286 03FC                     __ptext295 0000  
                   __ptext287 0015                     __ptext288 01A4                     __ptext289 00CF  
                   _m_address 007C             __size_of_uart_txt 003C                   ?_write_disp 00A4  
                   __pstrings 0497                __size_of_delay 001C            freshen_disp@d_1755 00AB  
                ??_decode_num 0071             interrupt_function 0004             write_disp@segment 00A5  
           write_disp@set_clr 00A7                     _uart_init 03FC                   __stringbase 049C  
          __end_of_decode_num 01A4                      i1delay@x 0070             i1write_disp@digit 0074  
            __size_ofi1_delay 001C           __size_of_write_disp 0057                     init_fetch 04EB  
                  ?_uart_init 00A0                      _clr_flgs 00B4                    strcpy@from 0070  
               ?i1_write_disp 0074                 __size_of_main 00AA                      _received 007D  
uart_init@rx_interrupt_enable 00A0                      _set_flgs 00B6                      _uart_txt 00CF  
              ??i1_write_disp 0076                      intlevel1 0000                     stringcode 0497  
               uart_init@baud 00A2                   ??_uart_init 00A2                  ??_write_disp 00A6  
                  _OPTION_REG 0081                      strcpy@cp 0073                      strlen@cp 0073  
                    strcpy@to 0072                      stringdir 0497                      stringtab 0497  
               uart_txt@F1620 0190            __end_of_write_disp 032C  
